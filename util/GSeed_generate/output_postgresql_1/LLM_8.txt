-- 基本SELECT查询，测试基础检索和排序功能
SELECT * FROM employees ORDER BY salary DESC;

-- 使用聚合函数和分组，处理空值情况并进行过滤
SELECT department_id, COUNT(*) AS employee_count, 
       COALESCE(AVG(salary), 0) AS avg_salary 
FROM employees 
GROUP BY department_id 
HAVING COUNT(*) > 5;

-- 测试窗口函数，计算排名和行号
SELECT 
    emp_no,
    salary,
    ROW_NUMBER() OVER (ORDER BY salary DESC) AS row_num,
    RANK() OVER (ORDER BY salary DESC) AS rank,
    DENSE_RANK() OVER (ORDER BY salary DESC) AS dense_rank
FROM employees;

-- 使用CTE进行复杂查询，可能涉及递归或其他结构
WITH cte_employees AS (
    SELECT emp_no, first_name, last_name, salary 
    FROM employees 
    WHERE salary > 50000
)
SELECT first_name || ' ' || last_name AS full_name, salary 
FROM cte_employees;

-- JSON数据处理，插入和查询
INSERT INTO json_test (data) 
VALUES ('{"name": "Alice", "age": 30, "hobbies": ["reading", "music"]}');

-- 查询JSON字段并更新
SELECT data->>'name' AS name, 
       jsonb_array_elements(data->'hobbies') AS hobby 
FROM json_test;

-- 数组操作，测试数组元素和条件查询
CREATE TABLE array_test (
    id INT,
    tags TEXT[]
);

INSERT INTO array_test (id, tags) 
VALUES (1, '{postgresql, database}');

SELECT * FROM array_test WHERE 'database' = ANY(tags);