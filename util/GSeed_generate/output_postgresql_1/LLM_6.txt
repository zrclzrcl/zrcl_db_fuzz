-- 创建一个用于测试的表
CREATE TABLE test_fuzz (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    age INTEGER CHECK (age >= 0),
    score DECIMAL(5,2) DEFAULT 0.00,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    metadata JSONB,
    tags TEXT[] 
);

-- 插入测试数据
INSERT INTO test_fuzz(name, age, score, metadata, tags)
VALUES
('Alice', 30, 98.76, '{"job": "Engineer", "hobby": ["reading", "music"]}', ARRAY['female', 'engineer']),
('Bob', 25, 87.65, '{"job": "Developer", "hobby": ["gaming", "traveling"]}', ARRAY['male', 'developer']),
('Charlie', 35, 89.01, '{"job": "Designer", "hobby": ["photography", "cooking"]}', ARRAY['male', 'designer']);

-- 测试复杂查询
WITH recursive_cte AS (
    SELECT id, name, age,
           ROW_NUMBER() OVER (ORDER BY age DESC) as row_num,
           RANK() OVER (ORDER BY score DESC) as score_rank
    FROM test_fuzz
)
SELECT * FROM recursive_cte WHERE row_num <= 3 AND score_rank > 1;

-- 测试更新操作
UPDATE test_fuzz 
SET score = score + 2.00, age = age + 1 
WHERE id IN (SELECT id FROM test_fuzz ORDER BY RANDOM() LIMIT 2);

-- 测试删除操作
DELETE FROM test_fuzz 
WHERE metadata ? 'hobby' AND jsonb_array_length(metadata->'hobby') > 1;

-- 测试 JSONB 操作
SELECT name, metadata->>'job' as job, tags[1] as first_tag
FROM test_fuzz
WHERE metadata ?& 'hobby'
AND metadata @> '{"job": "Engineer"}';

-- 测试窗口函数和复杂排序
SELECT 
    id,
    name,
    age,
    score,
    created_at,
    LEAD(score, 1, 0.00) OVER (ORDER BY created_at) as next_score,
    LAG(score, 1, 0.00) OVER (ORDER BY created_at) as prev_score
FROM test_fuzz
ORDER BY created_at DESC;