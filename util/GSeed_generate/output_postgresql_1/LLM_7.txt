-- 创建一个包含多种数据类型的表
CREATE TABLE test_fuzz (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    age INT,
    salary DECIMAL(10, 2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    data JSONB,
    arr INT[],
    UNIQUE (name)
);

-- 插入测试数据
INSERT INTO test_fuzz (name, age, salary, data, arr)
VALUES ('Alice', 30, 5000.50, '{"key": "value"}', '{1,2,3}'),
       ('Bob', 45, 7000.75, '{"name": "Bob", "age": 45}', '{4,5,6}');

-- 使用窗口函数和CTE的复杂查询
WITH cte AS (
    SELECT 
        id,
        name,
        age,
        salary,
        RANK() OVER (ORDER BY salary DESC) as salary_rank,
        DENSE_RANK() OVER (PARTITION BY age ORDER BY created_at ASC) as age_rank
    FROM test_fuzz
)
SELECT 
    cte.id,
    cte.name,
    cte.age,
    cte.salary,
    cte.salary_rank,
    cte.age_rank,
    t2.data ->> 'key' as json_key
FROM cte
LEFT JOIN test_fuzz t2 ON cte.id = t2.id
WHERE age > 30 AND salary < 8000.00
ORDER BY salary_rank ASC, age_rank DESC;

-- 测试PostgreSQL特有的JSON操作
SELECT 
    data ->> 'name' as name,
    data #>> '{nested, key}' as nested_key,
    jsonb_array_length(data) as array_length
FROM test_fuzz
WHERE data ? 'key';

-- 测试数组类型和边界条件
SELECT 
    arr[1] as first_element,
    arr[2:4] as slice,
    arr || '{7,8}' as concatenated_array,
    array_length(arr, 1) as length
FROM test_fuzz
WHERE age = 30;

-- 测试大数值和边界条件
SELECT 
    id * 1000000000000 as big_number,
    salary / 0.0000000001 as small_value,
    age + (2^31 -1) as int_overflow
FROM test_fuzz
LIMIT 1;

-- 测试PostgreSQL特有的正则表达式和日期函数
SELECT 
    name ~* '^[A-Za-z]+$' as is_valid_name,
    created_at::DATE as date_part,
    EXTRACT(YEAR FROM created_at) as year,
    DATE_TRUNC('month', created_at) as truncated_date
FROM test_fuzz
WHERE name ~ '[A-Z]';

-- 测试PostgreSQL特有的递归CTE
WITH RECURSIVE recursive_cte AS (
    SELECT 1 as n
    UNION ALL
    SELECT n + 1 FROM recursive_cte WHERE n < 10
)
SELECT * FROM recursive_cte;

-- 测试PostgreSQL特有的分区表（假设已经创建了时间戳字段）
-- 注意：实际应用中需要根据具体需求设置分区策略
CREATE TABLE test_fuzz_partition (
    LIKE test_fuzz INCLUDING ALL
) PARTITION BY RANGE (created_at);

-- 创建索引以提高查询性能
CREATE INDEX idx_name ON test_fuzz(name);
CREATE INDEX idx_salary ON test_fuzz(salary);
CREATE INDEX idx_data ON test_fuzz USING GIN(data);