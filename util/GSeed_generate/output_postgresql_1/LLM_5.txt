-- 创建一个测试表并插入一些数据
CREATE TABLE test_table (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    value INT,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO test_table (name, value, description) VALUES 
('Test1', 100, 'This is a test record.'),
('Test2', 200, 'Another test record with higher value.'),
('', -1, 'Edge case: empty name and negative value.'),
('MaxInt', 2147483647, 'Maximum integer value for testing edge cases.');

-- 复杂查询示例
WITH cte AS (
    SELECT 
        id,
        name,
        value,
        created_at,
        ROW_NUMBER() OVER (ORDER BY created_at DESC) as row_num
    FROM test_table
)
SELECT 
    cte.id,
    cte.name,
    cte.value,
    cte.created_at,
    json_build_object(
        'id', cte.id,
        'name', cte.name,
        'value', cte.value,
        'created_at', cte.created_at
    ) as json_data
FROM cte
WHERE row_num <= 5;

-- 测试聚合函数和子查询
SELECT 
    MAX(value) as max_value,
    MIN(value) as min_value,
    COUNT(*) as total_records,
    AVG(value) as average_value
FROM test_table
WHERE value > (SELECT value FROM test_table WHERE name = 'Test1');

-- 测试窗口函数和排序
SELECT 
    id,
    name,
    value,
    created_at,
    RANK() OVER (ORDER BY value DESC) as rank_by_value,
    DENSE_RANK() OVER (ORDER BY value ASC) as dense_rank_by_value
FROM test_table
ORDER BY value DESC;

-- 测试UNION操作符和复杂查询
SELECT 
    id,
    name,
    value,
    'Low' as category
FROM test_table
WHERE value < 150

UNION

SELECT 
    id,
    name,
    value,
    'High' as category
FROM test_table
WHERE value >= 150;