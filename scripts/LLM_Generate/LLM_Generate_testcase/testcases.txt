1. Test Case: 
```
CREATE TABLE customers(id INTEGER PRIMARY KEY, name TEXT, age INTEGER);
INSERT INTO customers VALUES(1, 'John Doe', 25);
INSERT INTO customers VALUES(2, 'Jane Doe', 23);
UPDATE customers SET age = 30 WHERE name = 'John Doe';
DELETE FROM customers WHERE name = 'Jane Doe';
SELECT * from customers;
DROP TABLE customers;
```

2. Test Case:
```
CREATE TABLE products (id INTEGER PRIMARY KEY, name TEXT, price REAL);
INSERT INTO products VALUES(1, 'Apple', 0.25), (2, 'Banana', 0.15), (3, 'Cherry', 0.05);
SELECT AVG(price) from products;
UPDATE products SET price = price * 1.1;
SELECT * FROM products;
DROP TABLE products;
```

3. Test Case:
```
CREATE TABLE Inventory (id INTEGER PRIMARY KEY, itemName TEXT, quantity INTEGER);
INSERT INTO Inventory VALUES (1, 'Pen', 30), (2, 'Pencil', 15), (3, 'Eraser', 20);
SELECT SUM(quantity) FROM Inventory;
UPDATE Inventory SET quantity = quantity + 10 WHERE itemName LIKE "%Pen%";
SELECT * FROM Inventory;
DROP TABLE Inventory;
```

4. Test Case: 
```
CREATE TABLE Users (id INTEGER PRIMARY KEY, username TEXT, password TEXT);
INSERT INTO Users VALUES (01, 'Alex', 'pass1234'), (02, 'Ben', 'pass789'), (03, 'Chris', 'pass456');
SELECT COUNT(Username) FROM Users WHERE password LIKE "pass%";
UPDATE Users SET password = 'pass567' WHERE username = 'Ben';
SELECT * FROM Users;
DROP TABLE Users;
```

5. Test Case: 
```
CREATE TABLE Account (id INTEGER PRIMARY KEY, name TEXT, balance REAL);
INSERT INTO Account VALUES (1,'John',5000.0), (2,'Doe',3000.0);
SELECT MAX(balance) FROM Account;
UPDATE Account SET balance = balance - 500 WHERE id = 2;
SELECT * FROM Account;
DROP TABLE Account;
```

6. Test Case: 
```
CREATE TABLE Orders (orderId INTEGER  PRIMARY KEY, productId INTEGER, quantity INTEGER);
INSERT INTO Orders VALUES (501, 221, 3), (502, 222, 5), (503, 223, 9);
SELECT COUNT(orderId) FROM Orders WHERE quantity > 5;
UPDATE Orders SET quantity = 4 WHERE orderId = 502;
SELECT * FROM Orders;
DROP TABLE Orders;
```

7. Test Case: 
```
CREATE TABLE Tickets (ticketId INTEGER PRIMARY KEY, passengerName TEXT, fare REAL);
INSERT INTO Tickets VALUES (101, 'George', 50.5), (102, 'Harry', 45.2), (103, 'Kevin', 55.3);
SELECT MIN(fare) FROM Tickets;
UPDATE Tickets SET fare = fare + 5 WHERE ticketId = 102;
SELECT * FROM Tickets;
DROP TABLE Tickets;
```

8. Test Case: 
```
CREATE TABLE Invoices (invoiceId INTEGER PRIMARY KEY, customerId INTEGER, total REAL);
INSERT INTO Invoices VALUES (1001, 201, 350.5), (1002, 202, 450.7), (1003, 203, 550.3);
SELECT AVG(total) FROM Invoices;
UPDATE Invoices SET total = total - 50 WHERE invoiceId = 1003;
SELECT * FROM Invoices;
DROP TABLE Invoices;
```

9. Test Case:
```
CREATE TABLE Vehicles (vehicleId INTEGER PRIMARY KEY, ownerName TEXT, registrationFee REAL);
INSERT INTO Vehicles VALUES (2001, 'Tom', 150.5), (2002, 'Jerry', 250.7), (2003, 'Spike', 350.3);
SELECT SUM(registrationFee) FROM Vehicles;
UPDATE Vehicles SET registrationFee = registrationFee - 50 WHERE vehicleId = 2003;
SELECT * FROM Vehicles;
DROP TABLE Vehicles;
```

10. Test Case:
```
CREATE TABLE Membership(id INTEGER PRIMARY KEY, name TEXT, duration INTEGER, cost REAL);
INSERT INTO Membership VALUES(1, 'Basic Plan', 3, 999.99), (2, 'Premium Plan', 6, 1999.99);
SELECT * FROM Membership WHERE duration BETWEEN 2 AND 5;
UPDATE Membership SET cost = cost * 0.9 WHERE name = 'Basic Plan';
SELECT * FROM Membership;
DROP TABLE Membership;
```
