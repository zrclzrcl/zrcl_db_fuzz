CREATE TABLE IF NOT EXISTS tbl_main (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER CHECK(age > 0),
    data BLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS tbl_refs (
    id INTEGER PRIMARY KEY,
    main_id INTEGER,
    ref_data TEXT,
    FOREIGN KEY (main_id) REFERENCES tbl_main(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS tbl_temp (
    temp_id INTEGER PRIMARY KEY,
    value REAL NOT NULL DEFAULT 0.0,
    description TEXT,
    check_flag BOOLEAN
);


INSERT INTO tbl_main (name, age, data) 
VALUES 
    ('Alice', 30, X'1234ABCD'),
    ('Bob', 25, X'5678EFGH'),
    ('Charlie', 35, X'9ABC1234');

INSERT INTO tbl_refs (id, main_id, ref_data)
VALUES
    (1, 1, 'Reference1'),
    (2, 2, 'Reference2'),
    (3, 3, 'Reference3');


SELECT t1.name, t1.age, t2.ref_data
FROM tbl_main t1
JOIN tbl_refs t2 ON t1.id = t2.main_id
WHERE t1.age > 28;


WITH RECURSIVE count_sequence(x) AS (
    VALUES(1)
    UNION ALL
    SELECT x + 1 FROM count_sequence WHERE x < 5
)
SELECT x FROM count_sequence;


SELECT 
    name,
    ROW_NUMBER() OVER (PARTITION BY age ORDER BY created_at DESC) AS row_num
FROM tbl_main;


SELECT 
    name, 
    (SELECT AVG(age) FROM tbl_main WHERE age > 20) AS avg_age
FROM tbl_main;


SELECT name 
FROM tbl_main 
WHERE age > 20 AND (name = 'Alice' OR name = 'Bob');


SELECT 
    name,
    CASE 
        WHEN age >= 30 THEN 'Senior'
        WHEN age >= 20 THEN 'Adult'
        ELSE 'Young'
    END AS age_group
FROM tbl_main;


SELECT 
    name,
    NTILE(3) OVER (ORDER BY age) AS age_tile
FROM tbl_main;


SELECT age, COUNT(*) AS count, SUM(age) AS total_age, MAX(age) AS max_age
FROM tbl_main
GROUP BY age;


SELECT age, COUNT(*) AS count
FROM tbl_main
GROUP BY age
HAVING COUNT(*) > 1;


CREATE TEMPORARY TABLE temp_table AS 
SELECT * FROM tbl_main WHERE age < 35;

INSERT INTO tbl_temp (value, description) 
SELECT age * 1.5, name FROM temp_table;


SELECT t1.name, t1.age, t2.ref_data
FROM tbl_main t1
LEFT JOIN tbl_refs t2 ON t1.id = t2.main_id
WHERE t1.age BETWEEN 25 AND 35
ORDER BY t1.age DESC;


SELECT t1.name, t2.name AS reference_name
FROM tbl_main t1
JOIN tbl_main t2 ON t1.age = t2.age
WHERE t1.id != t2.id;


SELECT name 
FROM tbl_main
ORDER BY age DESC
LIMIT 2 OFFSET 1;


SELECT name
FROM tbl_main
WHERE id NOT IN (SELECT main_id FROM tbl_refs);


UPDATE tbl_main
SET name = (SELECT ref_data FROM tbl_refs WHERE tbl_refs.main_id = tbl_main.id LIMIT 1)
WHERE age > 28;


INSERT INTO tbl_main (name, age, data)
SELECT name, age + 1, data FROM tbl_main WHERE age > 25;


INSERT INTO tbl_main (name, age, data)
VALUES ('Invalid', -5, X'9999FFFF');


DELETE FROM tbl_refs
WHERE NOT EXISTS (SELECT 1 FROM tbl_main WHERE tbl_main.id = tbl_refs.main_id);


ALTER TABLE tbl_main ADD COLUMN extra_data TEXT;


SELECT DISTINCT age, SUM(age) FROM tbl_main GROUP BY age;


INSERT INTO tbl_main (name, age, data)
VALUES ('NonNumeric', 'ThisShouldBeANumber', X'ABC123'); -- 类型不匹配


SELECT name FROM tbl_main WHERE age > 25
UNION
SELECT name FROM tbl_main WHERE age < 30;


SELECT t1.name, t2.name AS other_name
FROM tbl_main t1
CROSS JOIN tbl_main t2
WHERE t1.age != t2.age;


SELECT name 
FROM tbl_main
WHERE name IS NOT NULL;


SELECT name
FROM tbl_main
WHERE (age BETWEEN 20 AND 30) AND (name NOT LIKE 'C%');


SELECT name
FROM tbl_main
WHERE (age > 25) XOR (name = 'Bob');


CREATE INDEX IF NOT EXISTS idx_age_name ON tbl_main (age, name);
SELECT * FROM tbl_main WHERE age = 30 AND name = 'Alice';


CREATE TRIGGER IF NOT EXISTS trg_before_insert
BEFORE INSERT ON tbl_main
FOR EACH ROW
BEGIN
    UPDATE tbl_temp SET value = NEW.age * 2 WHERE temp_id = 1;
END;


SELECT name
FROM tbl_main
WHERE name LIKE 'A%' AND name NOT LIKE 'C%';


PRAGMA table_info(tbl_main);


BEGIN TRANSACTION;
INSERT INTO tbl_main (name, age, data) VALUES ('Transaction Test', 40, X'DEADBEEF');
ROLLBACK;


DELETE FROM tbl_refs WHERE main_id IN (SELECT id FROM tbl_main WHERE age < 30);