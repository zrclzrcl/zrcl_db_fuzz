CREATE TABLE IF NOT EXISTS departments (
    dept_id INTEGER PRIMARY KEY,
    dept_name TEXT NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS employees (
    emp_id INTEGER PRIMARY KEY,
    emp_name TEXT NOT NULL,
    dept_id INTEGER,
    hire_date TEXT DEFAULT (DATE('now')),
    salary REAL CHECK(salary >= 0),
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS projects (
    proj_id INTEGER PRIMARY KEY,
    proj_name TEXT NOT NULL,
    dept_id INTEGER,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE CASCADE
);


INSERT INTO departments (dept_name) VALUES
    ('Engineering'),
    ('HR'),
    ('Marketing');

INSERT INTO employees (emp_name, dept_id, salary) VALUES
    ('Alice', 1, 75000),
    ('Bob', 1, 80000),
    ('Charlie', 2, NULL);

INSERT INTO projects (proj_name, dept_id) VALUES
    ('Project A', 1),
    ('Project B', 2);


SELECT 
    d.dept_name,
    COUNT(e.emp_id) AS total_employees,
    SUM(e.salary) AS total_salary,
    COUNT(p.proj_id) AS total_projects
FROM departments d
LEFT JOIN employees e ON d.dept_id = e.dept_id
LEFT JOIN projects p ON d.dept_id = p.dept_id
GROUP BY d.dept_name;


WITH RECURSIVE hierarchy AS (
    SELECT emp_id, emp_name, dept_id, 1 AS level
    FROM employees
    WHERE dept_id = 1
    UNION ALL
    SELECT e.emp_id, e.emp_name, e.dept_id, h.level + 1
    FROM employees e
    JOIN hierarchy h ON e.dept_id = h.emp_id
)
SELECT * FROM hierarchy;


CREATE TABLE IF NOT EXISTS custom_sort (
    value TEXT COLLATE NOCASE
);

INSERT INTO custom_sort (value) VALUES ('Apple'), ('apple'), ('Banana'), ('banana');

SELECT * FROM custom_sort ORDER BY value;


SELECT 
    emp_name,
    CASE 
        WHEN salary > 70000 THEN 'High Salary'
        WHEN salary > 50000 THEN 'Medium Salary'
        ELSE 'Low Salary'
    END AS salary_category
FROM employees;


CREATE TRIGGER IF NOT EXISTS update_salary_trigger
AFTER UPDATE OF salary ON employees
FOR EACH ROW
BEGIN
    INSERT INTO projects (proj_name, dept_id) VALUES ('Bonus Adjustment', NEW.dept_id);
END;


UPDATE employees SET salary = salary + 5000 WHERE emp_id = 1;


SELECT 
    dept_id,
    MAX(salary) AS max_salary,
    AVG(salary) AS avg_salary,
    GROUP_CONCAT(emp_name, ', ') AS employee_list
FROM employees
GROUP BY dept_id;


CREATE TABLE IF NOT EXISTS json_simulation (
    id INTEGER PRIMARY KEY,
    json_data TEXT
);

INSERT INTO json_simulation (json_data) VALUES
    ('{"name": "Department A", "employees": [{"name": "Alice", "role": "Engineer"}]}');

SELECT json_data FROM json_simulation;


SELECT 
    emp_name,
    (SELECT COUNT(*) FROM projects WHERE dept_id = e.dept_id) AS project_count
FROM employees e
WHERE salary > (SELECT AVG(salary) FROM employees);


EXPLAIN QUERY PLAN
SELECT * 
FROM employees
WHERE dept_id = 1 AND salary > 60000;


SELECT emp_name, salary
FROM employees
ORDER BY salary DESC
LIMIT 2 OFFSET 1;


DELETE FROM projects WHERE proj_name = 'Bonus Adjustment';