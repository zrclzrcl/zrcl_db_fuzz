-- 创建具有生成列、约束和默认值的表
CREATE TABLE t1(
    c0 INTEGER NOT NULL AS (c1 + 1) UNIQUE, -- 生成列依赖其他列
    c1 INTEGER DEFAULT 5,                  -- 默认值
    c2 TEXT CHECK(c2 IN ('valid', 'test')),-- 检查约束
    c3 BLOB UNIQUE                         -- 唯一约束
);

-- 插入数据以触发约束和默认值
INSERT INTO t1(c1, c2, c3) VALUES 
    (10, 'valid', x'53514c697465'), 
    (20, 'test', NULL), 
    (NULL, 'valid', x'1234'); -- 测试默认值的应用

-- 测试替换操作符，插入并替换冲突记录
REPLACE INTO t1(c1, c2) VALUES 
    (10, 'conflict'), 
    (30, 'valid');

-- 创建一个复杂表，测试生成列的嵌套
CREATE TABLE t2(
    c0 AS (c1 * 2), 
    c1 INTEGER NOT NULL, 
    c2 AS (c0 + c1) STORED, 
    c3 CHECK(c2 < 100)
);

-- 插入数据到复杂表中
INSERT INTO t2(c1) VALUES 
    (10), 
    (20), 
    (NULL); -- 测试生成列的错误行为

-- 测试窗口函数的高级查询
SELECT 
    c1, 
    ROW_NUMBER() OVER (ORDER BY c1) AS row_num,
    RANK() OVER (PARTITION BY c2 ORDER BY c1) AS rank_val
FROM t1;

-- 创建触发器以测试事件处理
CREATE TRIGGER trg_replace_t1
AFTER REPLACE ON t1
WHEN NEW.c1 > 15
BEGIN
    INSERT INTO t1(c1, c2) VALUES (NEW.c1 + 1, 'triggered');
END;

-- 测试事务操作，检查回滚逻辑
BEGIN TRANSACTION;
INSERT INTO t1(c1, c2) VALUES (50, 'rollback_test');
ROLLBACK;

-- 测试复杂的递归查询
WITH RECURSIVE cte(n) AS (
    SELECT 1
    UNION ALL
    SELECT n + 1 FROM cte WHERE n < 5
)
SELECT * FROM cte;

-- 创建索引并测试优化路径
CREATE INDEX idx_c1 ON t1(c1);

-- 测试数据完整性
PRAGMA integrity_check;

-- 测试外键约束和联合表操作
CREATE TABLE t3(
    id INTEGER PRIMARY KEY,
    t1_id INTEGER NOT NULL,
    description TEXT,
    FOREIGN KEY(t1_id) REFERENCES t1(c1) ON DELETE CASCADE
);
INSERT INTO t3(t1_id, description) VALUES 
    (10, 'linked_record'), 
    (20, 'another_record');

-- 测试多表查询
SELECT t1.c1, t3.description 
FROM t1 
JOIN t3 ON t1.c1 = t3.t1_id 
WHERE t1.c2 = 'valid';

-- 删除触发器
DROP TRIGGER trg_replace_t1;

-- 删除表
DROP TABLE t2;
DROP TABLE t3;
