CREATE TABLE IF NOT EXISTS test1 (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    value REAL CHECK(value > 0),
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS test2 (
    id INTEGER PRIMARY KEY,
    ref_id INTEGER NOT NULL,
    description TEXT,
    amount INTEGER DEFAULT 100,
    FOREIGN KEY(ref_id) REFERENCES test1(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS test3 (
    col1 INTEGER PRIMARY KEY,
    col2 TEXT NOT NULL,
    col3 REAL,
    col4 INTEGER DEFAULT 10
);

CREATE TABLE IF NOT EXISTS test4 (
    col1 INTEGER,
    col2 TEXT,
    col3 INTEGER CHECK(col3 > 0),
    UNIQUE(col2)
);


INSERT INTO test1 (name, value) VALUES
    ('Item1', 100.5),
    ('Item2', 200.75),
    ('Item3', 50.3),
    ('Item4', 0.0),
    ('Item5', 0.1);

INSERT INTO test2 (ref_id, description, amount) VALUES
    (1, 'First entry', 150),
    (2, 'Second entry', 300),
    (1, 'Third entry', 450);

INSERT INTO test3 (col1, col2, col3, col4) VALUES
    (1, 'Text1', 100.0, 20),
    (2, 'Text2', 150.5, 30),
    (3, 'Text3', 50.25, 40);

INSERT INTO test4 (col1, col2, col3) VALUES
    (10, 'Entry10', 100),
    (20, 'Entry20', 200),
    (30, 'Entry30', 300);


UPDATE test1
SET value = (SELECT SUM(amount) FROM test2 WHERE ref_id = test1.id)
WHERE id IN (SELECT ref_id FROM test2 WHERE amount > 200);


SELECT 
    col2,
    CASE 
        WHEN col3 > 100 THEN 'High'
        WHEN col3 BETWEEN 50 AND 100 THEN 'Medium'
        ELSE 'Low'
    END AS value_category
FROM test3;


SELECT 
    description, 
    amount,
    RANK() OVER (ORDER BY amount DESC) AS rank_by_amount
FROM test2;


SELECT col2, SUM(col4) AS total_col4
FROM test3
GROUP BY col2
HAVING SUM(col4) > 50;


WITH RECURSIVE numbers(x) AS (
    SELECT 1
    UNION ALL
    SELECT x + 1 FROM numbers WHERE x < 5
)
SELECT x FROM numbers;


SELECT test1.name, test3.col2
FROM test1
CROSS JOIN test3;


SELECT DISTINCT col2 
FROM test3 
WHERE col3 < (SELECT AVG(col3) FROM test3);


SELECT * FROM test1 
WHERE (value < 50 OR name LIKE 'Item%') AND created_at >= '2023-01-01';


WITH recursive_data AS (
    SELECT id, name FROM test1 WHERE value > 50
    UNION ALL
    SELECT t.id, t.name FROM test1 t JOIN recursive_data rd ON t.value < rd.value
)
SELECT * FROM recursive_data;


SELECT 
    t1.name, 
    t2.description, 
    t2.amount 
FROM test1 t1
JOIN test2 t2 ON t1.id = t2.ref_id
WHERE t1.value > 100;


SELECT id, name FROM test1
UNION
SELECT id, description FROM test2;


SELECT * FROM test1 WHERE name LIKE 'Item%';


SELECT 
    description, 
    amount,
    CUME_DIST() OVER (ORDER BY amount DESC) AS cumulative_distribution
FROM test2;


INSERT INTO test3 (col1, col2, col3, col4)
SELECT id, name, value, 10 FROM test1 WHERE value < 50;


SELECT * FROM test3
ORDER BY col1 DESC
LIMIT 3 OFFSET 1;


SELECT name FROM test1
EXCEPT
SELECT description FROM test2;


INSERT INTO test4 (col1, col2, col3) VALUES
    (1, 'Alpha', -5), 
    (2, 'Beta', 20),
    (3, 'Gamma', 15);


SELECT name 
FROM test1
WHERE NOT EXISTS (SELECT 1 FROM test2 WHERE test1.id = test2.ref_id);


SELECT col2, AVG(col3) AS average_col3
FROM test3
GROUP BY col2
HAVING AVG(col3) > 100;


UPDATE test2
SET description = 'Updated'
WHERE ref_id IN (SELECT id FROM test1 WHERE value < 50);


SELECT DISTINCT t1.name, t2.description
FROM test1 t1
JOIN test2 t2 ON t1.id = t2.ref_id;


DELETE FROM test3 WHERE col1 NOT IN (SELECT col1 FROM test4 WHERE col3 > 10);


SELECT t1.name AS t1_name, t2.name AS t2_name
FROM test1 t1, test1 t2
WHERE t1.value < t2.value;


DELETE FROM test1 WHERE id IN (SELECT ref_id FROM test2 WHERE amount > 250);