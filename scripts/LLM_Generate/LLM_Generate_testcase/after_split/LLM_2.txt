-- 创建一个复杂的表，测试生成列、检查约束和默认值
CREATE TABLE t1(
    c0 AS (c1 + c2) STORED,
    c1 INTEGER DEFAULT 5 NOT NULL,
    c2 TEXT CHECK(length(c2) > 1),
    c3 BLOB UNIQUE,
    c4 REAL DEFAULT(3.14)
);

-- 测试WITH子句和递归查询
WITH RECURSIVE cte(n) AS (
    SELECT 1
    UNION ALL
    SELECT n + 1 FROM cte WHERE n < 5
)
SELECT * FROM cte;

-- 插入多种数据以测试类型和约束
INSERT INTO t1 (c1, c2, c3) VALUES 
    (10, 'text', x'53514c697465'), -- BLOB数据
    (NULL, 'too_short', NULL),     -- 测试检查约束失败
    (20, 'valid_text', NULL);      -- 测试NULL和默认值

-- 更新表中部分值，触发生成列更新
UPDATE t1 SET c1 = c1 * 2 WHERE c0 < 15;

-- 删除部分数据，测试约束传播
DELETE FROM t1 WHERE c1 = 20;

-- 测试复杂的窗口函数
SELECT 
    c1, 
    c2, 
    ROW_NUMBER() OVER (PARTITION BY c2 ORDER BY c1) AS row_num,
    RANK() OVER (ORDER BY c1) AS rank_val
FROM t1;

-- 创建触发器来测试表操作后的自动逻辑
CREATE TRIGGER trg_after_update_t1
AFTER UPDATE ON t1
WHEN NEW.c1 > 10
BEGIN
    INSERT INTO t1 (c1, c2, c3) VALUES (NEW.c1 + 1, 'triggered', x'00');
END;

-- 测试事务行为，回滚和提交
BEGIN TRANSACTION;
INSERT INTO t1 (c1, c2) VALUES (100, 'in_transaction');
ROLLBACK; -- 回滚事务

-- 测试带有函数的表达式
SELECT 
    c1, 
    printf('%s is a text', c2) AS formatted_text
FROM t1
WHERE c4 > 2;

-- 创建索引并测试优化路径
CREATE INDEX idx_c1 ON t1(c1);

-- 测试PRAGMA语句，验证数据库的完整性
PRAGMA integrity_check;

-- 创建带有联合键的表以测试复杂性
CREATE TABLE t2(
    c0 INTEGER PRIMARY KEY,
    c1 INTEGER NOT NULL,
    c2 TEXT NOT NULL,
    FOREIGN KEY(c1) REFERENCES t1(c1)
);

-- 插入数据并测试多表操作
INSERT INTO t2 (c0, c1, c2) VALUES 
    (1, 10, 'related'), 
    (2, 15, 'more_data');

SELECT t1.c1, t2.c2 
FROM t1 
JOIN t2 ON t1.c1 = t2.c1
WHERE t2.c0 < 2;

-- 删除触发器
DROP TRIGGER trg_after_update_t1;

-- 删除表
DROP TABLE t2;
