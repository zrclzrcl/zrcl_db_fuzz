CREATE TABLE primary_table (
    primary_id INTEGER PRIMARY KEY AUTOINCREMENT,
    primary_name TEXT NOT NULL UNIQUE,
    primary_value REAL CHECK (primary_value >= 0),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE secondary_table (
    secondary_id INTEGER PRIMARY KEY,
    primary_ref_id INTEGER NOT NULL,
    secondary_description TEXT COLLATE NOCASE,
    secondary_status TEXT CHECK (secondary_status IN ('active', 'inactive', 'archived')),
    FOREIGN KEY (primary_ref_id) REFERENCES primary_table(primary_id) ON DELETE CASCADE
);

CREATE TABLE tertiary_table (
    tertiary_id INTEGER PRIMARY KEY,
    reference_category TEXT NOT NULL,
    reference_value INTEGER DEFAULT 10 CHECK (reference_value BETWEEN 0 AND 100),
    UNIQUE(reference_category, reference_value)
);

CREATE TABLE mapping_table (
    map_id INTEGER PRIMARY KEY,
    tertiary_ref_id INTEGER,
    secondary_ref_id INTEGER,
    map_data TEXT DEFAULT 'DefaultMapData',
    FOREIGN KEY (tertiary_ref_id) REFERENCES tertiary_table(tertiary_id),
    FOREIGN KEY (secondary_ref_id) REFERENCES secondary_table(secondary_id)
);

INSERT INTO primary_table (primary_name, primary_value) VALUES ('Primary1', 100.5);
INSERT INTO primary_table (primary_name, primary_value) VALUES ('Primary2', 200.75);
INSERT INTO secondary_table (secondary_id, primary_ref_id, secondary_description, secondary_status) VALUES (1, 1, 'Secondary1', 'active');
INSERT INTO secondary_table (secondary_id, primary_ref_id, secondary_description, secondary_status) VALUES (2, 2, 'Secondary2', 'inactive');
INSERT INTO tertiary_table (tertiary_id, reference_category) VALUES (1, 'CategoryA');
INSERT INTO mapping_table (map_id, tertiary_ref_id, secondary_ref_id, map_data) VALUES (1, 1, 1, 'MappedData1');

WITH RECURSIVE hierarchy(level, value) AS (
    SELECT 1, 1
    UNION ALL
    SELECT level + 1, value * 2 FROM hierarchy WHERE level < 5
)
SELECT * FROM hierarchy;

SELECT 
    pt.primary_name, 
    st.secondary_description, 
    mt.map_data 
FROM primary_table pt
LEFT JOIN secondary_table st ON pt.primary_id = st.primary_ref_id
LEFT JOIN mapping_table mt ON st.secondary_id = mt.secondary_ref_id;

CREATE TRIGGER before_insert_primary
BEFORE INSERT ON primary_table
FOR EACH ROW
BEGIN
    SELECT RAISE(ABORT, 'Insert not allowed: Trigger enforced!');
END;

CREATE TRIGGER after_update_secondary
AFTER UPDATE ON secondary_table
FOR EACH ROW
BEGIN
    INSERT INTO tertiary_table (tertiary_id, reference_category, reference_value) 
    VALUES (NEW.secondary_id, 'AutoGenerated', NEW.secondary_id * 10);
END;

UPDATE secondary_table SET secondary_status = 'archived' WHERE secondary_id = 2;

ALTER TABLE tertiary_table ADD COLUMN last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP;

CREATE VIEW full_mapping_view AS
SELECT 
    pt.primary_name, 
    st.secondary_description, 
    tt.reference_category, 
    mt.map_data 
FROM primary_table pt
JOIN secondary_table st ON pt.primary_id = st.primary_ref_id
JOIN mapping_table mt ON st.secondary_id = mt.secondary_ref_id
JOIN tertiary_table tt ON mt.tertiary_ref_id = tt.tertiary_id;

SELECT * FROM full_mapping_view;

DELETE FROM secondary_table WHERE secondary_id = 1;

CREATE INDEX idx_secondary_status ON secondary_table(secondary_status);
CREATE INDEX idx_tertiary_reference ON tertiary_table(reference_category, reference_value);

SELECT pt.primary_name, 
       CASE WHEN st.secondary_status = 'archived' THEN 'Deprecated' ELSE 'Active' END AS status_flag
FROM primary_table pt
LEFT JOIN secondary_table st ON pt.primary_id = st.primary_ref_id;

BEGIN TRANSACTION;
INSERT INTO tertiary_table (tertiary_id, reference_category, reference_value) VALUES (3, 'CategoryB', 30);
ROLLBACK;

SELECT tt.reference_category, 
       MAX(tt.reference_value) OVER (PARTITION BY tt.reference_category) AS max_value
FROM tertiary_table tt;

DROP VIEW full_mapping_view;

DROP TABLE mapping_table;