CREATE TABLE IF NOT EXISTS inventory (
    item_id INTEGER PRIMARY KEY AUTOINCREMENT,
    item_name TEXT NOT NULL,
    category TEXT CHECK(category IN ('Electronics', 'Furniture', 'Clothing', 'Food')),
    price REAL CHECK(price >= 0),
    stock INTEGER DEFAULT 0,
    last_updated TEXT DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS sales (
    sale_id INTEGER PRIMARY KEY AUTOINCREMENT,
    item_id INTEGER,
    quantity INTEGER CHECK(quantity > 0),
    sale_date TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (item_id) REFERENCES inventory(item_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS suppliers (
    supplier_id INTEGER PRIMARY KEY AUTOINCREMENT,
    supplier_name TEXT NOT NULL,
    contact_email TEXT UNIQUE,
    phone_number TEXT CHECK(phone_number LIKE '___-___-____')
);

CREATE TABLE IF NOT EXISTS orders (
    order_id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_name TEXT NOT NULL,
    order_date TEXT DEFAULT CURRENT_TIMESTAMP,
    shipping_address TEXT,
    total_amount REAL CHECK(total_amount > 0)
);


INSERT INTO inventory (item_name, category, price, stock) VALUES
    ('Laptop', 'Electronics', 1500.0, 10),
    ('Chair', 'Furniture', 100.5, 25),
    ('T-shirt', 'Clothing', 19.99, 100),
    ('Apple', 'Food', 1.5, 500);

INSERT INTO sales (item_id, quantity) VALUES
    (1, 5),
    (2, 3),
    (4, 50);

INSERT INTO suppliers (supplier_name, contact_email, phone_number) VALUES
    ('TechCorp', 'contact@techcorp.com', '123-456-7890'),
    ('Furniture World', 'furniture@world.com', '987-654-3210'),
    ('Food Supplies', 'foods@supplies.com', '555-555-5555');

INSERT INTO orders (customer_name, shipping_address, total_amount) VALUES
    ('Alice', '123 Main St', 1050.0),
    ('Bob', '456 Oak St', 200.75),
    ('Charlie', '789 Pine St', 350.0);


UPDATE inventory
SET stock = stock - (SELECT SUM(quantity) FROM sales WHERE sales.item_id = inventory.item_id)
WHERE EXISTS (SELECT 1 FROM sales WHERE sales.item_id = inventory.item_id);


SELECT item_name, price * stock AS total_value
FROM inventory
WHERE total_value > 500;


SELECT 
    item_name,
    SUM(quantity) OVER (PARTITION BY item_id ORDER BY sale_date) AS cumulative_sales,
    RANK() OVER (ORDER BY price DESC) AS rank_by_price
FROM sales
JOIN inventory ON sales.item_id = inventory.item_id;


WITH RECURSIVE order_hierarchy(order_id, total_amount, level) AS (
    SELECT order_id, total_amount, 1 FROM orders WHERE order_id = 1
    UNION ALL
    SELECT o.order_id, o.total_amount, oh.level + 1
    FROM orders o
    JOIN order_hierarchy oh ON o.order_id > oh.order_id
)
SELECT * FROM order_hierarchy;


SELECT item_name
FROM inventory
WHERE price > (SELECT AVG(price) FROM inventory);


SELECT a.item_name AS item_name_1, b.item_name AS item_name_2
FROM inventory a
JOIN inventory b ON a.category = b.category AND a.item_id != b.item_id;


INSERT INTO sales (item_id, quantity)
SELECT item_id, stock / 2
FROM inventory
WHERE stock > 20;


SELECT 
    o.order_id,
    o.customer_name,
    o.total_amount,
    (SELECT SUM(quantity * price) 
     FROM sales s 
     JOIN inventory i ON s.item_id = i.item_id
     WHERE s.order_id = o.order_id) AS order_total
FROM orders o;


SELECT 
    item_name,
    CASE 
        WHEN stock < 10 THEN 'Low Stock'
        WHEN stock BETWEEN 10 AND 50 THEN 'Moderate Stock'
        ELSE 'High Stock'
    END AS stock_status
FROM inventory;


SELECT DISTINCT item_name
FROM inventory
WHERE price < (SELECT AVG(price) FROM inventory);


DELETE FROM inventory
WHERE NOT EXISTS (
    SELECT 1 FROM sales WHERE sales.item_id = inventory.item_id
);


SELECT 
    i.item_name, 
    s.supplier_name
FROM inventory i
CROSS JOIN suppliers s;


SELECT * FROM sales
WHERE EXISTS (
    SELECT 1 FROM inventory
    WHERE inventory.item_id = sales.item_id AND price > 100
)
AND quantity > 2;


CREATE TRIGGER IF NOT EXISTS update_inventory_after_sale
AFTER INSERT ON sales
BEGIN
    UPDATE inventory
    SET stock = stock - NEW.quantity
    WHERE item_id = NEW.item_id;
END;


INSERT INTO sales (item_id, quantity) VALUES (1, 3);


WITH total_sales AS (
    SELECT item_id, SUM(quantity) AS total_quantity
    FROM sales
    GROUP BY item_id
)
SELECT i.item_name, ts.total_quantity
FROM inventory i
JOIN total_sales ts ON i.item_id = ts.item_id
WHERE ts.total_quantity > 5;


SELECT * FROM orders
ORDER BY order_id DESC
LIMIT 3 OFFSET 1;


SELECT item_name, SUM(quantity) AS total_sales
FROM sales
JOIN inventory ON sales.item_id = inventory.item_id
GROUP BY item_name
HAVING SUM(quantity) > 10;


SELECT * FROM inventory
WHERE category = 'Electronics' AND price > ?;