
CREATE TABLE IF NOT EXISTS product_categories (
    category_id INTEGER NOT NULL,
    sub_category_id INTEGER NOT NULL,
    category_name TEXT NOT NULL,
    PRIMARY KEY (category_id, sub_category_id),
    UNIQUE (category_name)
);

CREATE TABLE IF NOT EXISTS products (
    product_id INTEGER PRIMARY KEY AUTOINCREMENT,
    category_id INTEGER NOT NULL,
    sub_category_id INTEGER NOT NULL,
    product_name TEXT NOT NULL,
    price REAL CHECK(price >= 0),
    stock INTEGER DEFAULT 0 CHECK(stock >= 0),
    FOREIGN KEY (category_id, sub_category_id) REFERENCES product_categories(category_id, sub_category_id) ON DELETE CASCADE
);


INSERT INTO product_categories (category_id, sub_category_id, category_name) VALUES
    (1, 1, 'Electronics'),
    (1, 2, 'Home Appliances'),
    (2, 1, 'Books'),
    (2, 2, 'Stationery');

INSERT INTO products (category_id, sub_category_id, product_name, price, stock) VALUES
    (1, 1, 'Smartphone', 699.99, 50),
    (1, 2, 'Microwave', 89.99, 10),
    (2, 1, 'Fiction Novel', 15.99, 0),
    (2, 2, 'Notebook', 3.49, 200);


SELECT 
    p1.product_name AS product_1,
    p2.product_name AS product_2,
    ABS(p1.price - p2.price) AS price_difference
FROM products p1
JOIN products p2 ON p1.category_id = p2.category_id AND p1.product_id < p2.product_id;


INSERT INTO products (category_id, sub_category_id, product_name, price, stock)
SELECT 1, 2, 'Oven', 120.00, 5
WHERE NOT EXISTS (
    SELECT 1 FROM products WHERE product_name = 'Oven'
);


CREATE TRIGGER IF NOT EXISTS update_stock_trigger
AFTER UPDATE ON products
FOR EACH ROW
BEGIN
    INSERT INTO products (category_id, sub_category_id, product_name, price, stock)
    VALUES (NEW.category_id, NEW.sub_category_id, 'Restocked: ' || NEW.product_name, NEW.price, NEW.stock + 10)
    WHERE NEW.stock = 0;
END;


UPDATE products SET stock = 0 WHERE product_name = 'Microwave';


SELECT 
    pc.category_name,
    p.product_name,
    CASE
        WHEN p.stock > 100 THEN 'Overstocked'
        WHEN p.stock BETWEEN 1 AND 100 THEN 'In Stock'
        ELSE 'Out of Stock'
    END AS stock_status
FROM products p
JOIN product_categories pc ON p.category_id = pc.category_id AND p.sub_category_id = pc.sub_category_id;


UPDATE products
SET stock = stock + 10
WHERE product_id IN (
    SELECT product_id
    FROM products
    WHERE price > 50 AND stock < 100
);


DELETE FROM products
WHERE product_id IN (
    SELECT p.product_id
    FROM products p
    LEFT JOIN product_categories pc ON p.category_id = pc.category_id
    WHERE p.stock = 0
);


WITH RECURSIVE product_combinations AS (
    SELECT product_id, product_name, 1 AS level
    FROM products
    UNION ALL
    SELECT p.product_id, p.product_name, pc.level + 1
    FROM products p
    JOIN product_combinations pc ON p.product_id > pc.product_id
)
SELECT * FROM product_combinations LIMIT 10;


CREATE VIRTUAL TABLE IF NOT EXISTS search_index USING fts5(product_name, tokenize = 'porter');
INSERT INTO search_index (product_name) SELECT product_name FROM products;

SELECT * FROM search_index WHERE product_name MATCH 'Smart*';


SELECT 
    product_name,
    price,
    RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS price_rank
FROM products;


SELECT 
    DATE('now', '+7 days') AS next_week,
    TIME('now', '-3 hours') AS earlier_today,
    STRFTIME('%W', 'now') AS current_week_number;


EXPLAIN QUERY PLAN
SELECT 
    pc.category_name, 
    p.product_name, 
    p.price
FROM product_categories pc
JOIN products p ON pc.category_id = p.category_id
WHERE p.price > 50
ORDER BY p.stock DESC;


DELETE FROM products WHERE product_name LIKE 'Restocked:%';