
CREATE TABLE main_table (
    id INTEGER PRIMARY KEY,
    title TEXT NOT NULL UNIQUE,
    description TEXT DEFAULT 'Default description',
    status INTEGER CHECK(status IN (0, 1)),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE related_table (
    rel_id INTEGER PRIMARY KEY AUTOINCREMENT,
    main_id INTEGER NOT NULL,
    details TEXT CHECK(length(details) < 255),
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (main_id) REFERENCES main_table(id) ON DELETE CASCADE
);

CREATE TABLE extra_table (
    key_id INTEGER PRIMARY KEY,
    value TEXT NOT NULL,
    reference_id INTEGER DEFAULT NULL
);


INSERT INTO main_table (title, status) VALUES ('Item1', 0);
INSERT INTO main_table (title, status) VALUES ('Item2', 1);
INSERT INTO main_table (title, status) VALUES ('Item3', 1);
INSERT INTO related_table (main_id, details) VALUES (1, 'Detail1');
INSERT INTO related_table (main_id, details) VALUES (1, 'Detail2');
INSERT INTO extra_table (key_id, value) VALUES (1, 'ExtraValue1');


SELECT 
    m.title, 
    r.details, 
    LENGTH(m.description) AS desc_length
FROM main_table m
LEFT JOIN related_table r ON m.id = r.main_id
WHERE m.status = 1
ORDER BY m.created_at DESC;

SELECT *
FROM related_table
WHERE main_id IN (
    SELECT id FROM main_table WHERE status = 0
);

SELECT 
    id, 
    title,
    RANK() OVER (ORDER BY created_at) AS rank_created
FROM main_table;


WITH RECURSIVE sequence(n) AS (
    SELECT 1
    UNION ALL
    SELECT n + 1 FROM sequence WHERE n < 20
)
SELECT * FROM sequence;


SELECT 
    main_id, 
    COUNT(*) AS count_details
FROM related_table
GROUP BY main_id
HAVING count_details > 1;


SELECT title FROM main_table WHERE status = 1
UNION
SELECT value FROM extra_table;


SELECT 
    id,
    CASE 
        WHEN status = 0 THEN 'Inactive'
        WHEN status = 1 THEN 'Active'
        ELSE 'Unknown'
    END AS status_text
FROM main_table;


ALTER TABLE main_table ADD COLUMN extra_info TEXT DEFAULT 'Additional data';
INSERT INTO main_table (title, status, extra_info) VALUES ('Item4', 0, 'NewInfo');


CREATE TRIGGER update_trigger
AFTER UPDATE ON main_table
FOR EACH ROW
BEGIN
    UPDATE related_table SET updated_at = CURRENT_TIMESTAMP WHERE main_id = NEW.id;
END;


UPDATE main_table SET status = 1 WHERE id = 1;


SELECT 
    m.title, 
    e.value
FROM main_table m
CROSS JOIN extra_table e
WHERE m.id > 1 AND e.key_id = 1;


BEGIN TRANSACTION;
INSERT INTO main_table (title, status) VALUES ('TransactionalItem', 1);
ROLLBACK;


INSERT INTO main_table (title, status) VALUES (NULL, 0); -- NULL值插入测试
INSERT INTO related_table (main_id, details) VALUES (1000, 'NonExistentReference'); -- 外键错误测试


SELECT * 
FROM main_table
ORDER BY created_at DESC
LIMIT 2 OFFSET 1;


DELETE FROM main_table WHERE id = 1;


CREATE VIEW main_summary AS
SELECT id, title, status
FROM main_table
WHERE status = 1;

SELECT * FROM main_summary;


PRAGMA table_info(main_table);
PRAGMA foreign_key_list(main_table);
PRAGMA index_list(main_table);
PRAGMA database_list;


SELECT 
    title,
    (SELECT COUNT(*) FROM related_table WHERE related_table.main_id = main_table.id) AS related_count
FROM main_table;


SELECT 
    a.title AS title1, 
    b.title AS title2
FROM main_table a, main_table b
WHERE a.status = b.status AND a.id != b.id;


SELECT title
FROM main_table
WHERE EXISTS (
    SELECT 1 
    FROM related_table 
    WHERE related_table.main_id = main_table.id
);


SELECT 'MainTable' AS source, title 
FROM main_table
UNION ALL
SELECT 'ExtraTable', value 
FROM extra_table;