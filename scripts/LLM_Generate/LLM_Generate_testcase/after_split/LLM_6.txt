-- 设置临时存储为内存
PRAGMA temp_store = MEMORY;

-- 创建临时表，增加更多复杂约束和逻辑
CREATE TEMP TABLE t1(
    c0 TEXT,
    c1 AS (c0 || '_suffix') UNIQUE NOT NULL CHECK(c0 != ''),
    c2 REAL CHECK(c2 > 0) PRIMARY KEY,
    c3 BLOB DEFAULT x'00'
) WITHOUT ROWID;

-- 创建索引，增加条件和类型转换
CREATE UNIQUE INDEX idx_t1 ON t1(CAST(c2 AS INT)) WHERE c2 < 10;

-- 对所有索引重新编排
REINDEX;

-- 插入数据到临时表，测试生成列、默认值和主键约束
INSERT INTO t1(c0, c2) VALUES 
    ('row1', 1.0), 
    ('row2', 2.0), 
    (NULL, 3.0); -- NULL 值测试生成列约束

-- 测试替换操作，覆盖多种约束
REPLACE INTO t1(c2, c0, c3) VALUES 
    (1.0, 'replace_row', x'9b'), 
    (2.0, 'replace_row2', NULL);

-- 更新表中的数据，触发生成列和约束逻辑
UPDATE t1 SET c2 = c2 * 2 WHERE c0 = 'row1';

-- 创建触发器，测试插入操作后执行的逻辑
CREATE TRIGGER trg_t1_insert
AFTER INSERT ON t1
BEGIN
    INSERT INTO t1(c0, c2) VALUES ('trigger_insert', NEW.c2 + 1);
END;

-- 测试事务管理
BEGIN TRANSACTION;
INSERT INTO t1(c0, c2) VALUES ('transaction_test', 5.0);
ROLLBACK;

-- 测试递归查询，结合多种数据结构
WITH RECURSIVE cte(n) AS (
    SELECT 1
    UNION ALL
    SELECT n + 1 FROM cte WHERE n < 5
)
SELECT c0, c2, n FROM t1, cte WHERE c2 = n;

-- 测试数据完整性
PRAGMA integrity_check;

-- 删除索引和触发器，释放资源
DROP INDEX idx_t1;
DROP TRIGGER trg_t1_insert;
