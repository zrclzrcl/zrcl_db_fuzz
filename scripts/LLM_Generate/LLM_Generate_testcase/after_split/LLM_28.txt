CREATE TABLE authors (
    author_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    birthdate DATE,
    nationality TEXT
);

CREATE TABLE books (
    book_id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    author_id INTEGER NOT NULL,
    publication_year INTEGER CHECK (publication_year > 0),
    genre TEXT,
    price REAL CHECK (price >= 0),
    FOREIGN KEY (author_id) REFERENCES authors(author_id)
);

CREATE TABLE borrowers (
    borrower_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    phone TEXT
);

CREATE TABLE borrow_records (
    borrow_id INTEGER PRIMARY KEY AUTOINCREMENT,
    borrower_id INTEGER NOT NULL,
    book_id INTEGER NOT NULL,
    borrow_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    return_date TIMESTAMP,
    FOREIGN KEY (borrower_id) REFERENCES borrowers(borrower_id),
    FOREIGN KEY (book_id) REFERENCES books(book_id)
);

CREATE TABLE reviews (
    review_id INTEGER PRIMARY KEY AUTOINCREMENT,
    book_id INTEGER NOT NULL,
    reviewer_name TEXT NOT NULL,
    rating INTEGER CHECK (rating BETWEEN 1 AND 5),
    review_text TEXT,
    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (book_id) REFERENCES books(book_id)
);

INSERT INTO authors (name, birthdate, nationality) 
VALUES ('George Orwell', '1903-06-25', 'British'),
       ('J.K. Rowling', '1965-07-31', 'British'),
       ('Haruki Murakami', '1949-01-12', 'Japanese');

INSERT INTO books (title, author_id, publication_year, genre, price) 
VALUES ('1984', 1, 1949, 'Dystopian', 15.99),
       ('Harry Potter and the Sorcerer\'s Stone', 2, 1997, 'Fantasy', 12.99),
       ('Norwegian Wood', 3, 1987, 'Fiction', 18.99);

INSERT INTO borrowers (name, email, phone) 
VALUES ('Alice Johnson', 'alice.j@example.com', '123-456-7890'),
       ('Bob Lee', 'bob.lee@example.com', '234-567-8901');

INSERT INTO borrow_records (borrower_id, book_id) 
VALUES (1, 1),
       (1, 3),
       (2, 2);

INSERT INTO reviews (book_id, reviewer_name, rating, review_text) 
VALUES (1, 'John Doe', 5, 'A brilliant and thought-provoking book.'),
       (2, 'Mary Smith', 4, 'A magical start to a fantastic series.'),
       (3, 'Peter Brown', 3, 'A bit slow, but beautifully written.');

WITH RECURSIVE book_hierarchy AS (
    SELECT b.book_id, b.title, b.price, b.genre, 0 AS level
    FROM books b
    WHERE b.genre = 'Fantasy'
    UNION ALL
    SELECT b.book_id, b.title, b.price, b.genre, bh.level + 1
    FROM books b
    JOIN book_hierarchy bh ON b.book_id != bh.book_id
)
SELECT * FROM book_hierarchy;

CREATE TRIGGER update_return_date
AFTER UPDATE ON borrow_records
WHEN NEW.return_date IS NOT NULL
BEGIN
    UPDATE borrow_records SET return_date = CURRENT_TIMESTAMP WHERE borrow_id = NEW.borrow_id;
END;

CREATE TRIGGER delete_review_on_book_delete
AFTER DELETE ON books
BEGIN
    DELETE FROM reviews WHERE book_id = OLD.book_id;
END;

CREATE VIEW top_rated_books AS
SELECT b.title, AVG(r.rating) AS avg_rating
FROM books b
JOIN reviews r ON b.book_id = r.book_id
GROUP BY b.book_id
HAVING AVG(r.rating) >= 4;

SELECT * FROM top_rated_books;

UPDATE books SET price = price * 1.1 WHERE genre = 'Fantasy';

CREATE INDEX idx_author_name ON authors(name);
CREATE INDEX idx_book_title ON books(title);

SELECT b.title, COUNT(br.borrow_id) AS borrow_count
FROM books b
JOIN borrow_records br ON b.book_id = br.book_id
GROUP BY b.book_id;

SELECT b.title, 
       CASE 
           WHEN b.price > 15 THEN 'Expensive'
           ELSE 'Affordable'
       END AS price_category
FROM books b;

BEGIN TRANSACTION;
INSERT INTO books (title, author_id, publication_year, genre, price) 
VALUES ('Kafka on the Shore', 3, 2002, 'Fiction', 20.99);
UPDATE authors SET nationality = 'American' WHERE author_id = 3;
COMMIT;

SELECT 
    b.title, 
    CASE 
        WHEN length(b.genre) > 5 THEN 'Long genre'
        ELSE 'Short genre'
    END AS genre_length
FROM books b;

DELETE FROM books WHERE book_id = 2;

DROP TRIGGER update_return_date;
DROP VIEW top_rated_books;
DROP TABLE reviews;