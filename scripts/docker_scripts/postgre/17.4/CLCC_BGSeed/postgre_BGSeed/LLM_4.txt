-- 创建一个包含多种数据类型的表以覆盖更多数据库特性
CREATE TABLE test_fuzz (
    id SERIAL PRIMARY KEY,
    text_field TEXT,
    numeric_field NUMERIC(10,2),
    date_field DATE,
    jsonb_field JSONB,
    array_field INTEGER[],
    enum_field ENUM('option1', 'option2')
);

-- 插入测试数据，包含边界条件和特殊字符
INSERT INTO test_fuzz (text_field, numeric_field, date_field, jsonb_field, array_field, enum_field) 
VALUES 
    ('测试字符串', 99999.99, '2024-01-01', '{"key": "value"}', ARRAY[1,2,3], 'option1'),
    ('边界条件测试', -99999.99, '1970-01-01', '{"test": [1,2,3]}', ARRAY[], 'option2');

-- 复杂查询，包含窗口函数、CTE和JSON操作
WITH cte AS (
    SELECT 
        id,
        text_field,
        ROW_NUMBER() OVER (ORDER BY id) as rn,
        jsonb_array_length(jsonb_field->'test') as array_len
    FROM test_fuzz
)
SELECT 
    cte.id,
    cte.text_field,
    SUM(cte.numeric_field) OVER () as total_sum,
    CASE 
        WHEN cte.array_len > 2 THEN 'Long array'
        ELSE 'Short array'
    END as array_type
FROM cte;

-- 测试聚合函数和子查询
SELECT 
    COUNT(*) as total_records,
    MAX(numeric_field) as max_value,
    (SELECT MIN(date_field) FROM test_fuzz) as min_date
FROM test_fuzz;

-- 创建一个触发器来测试数据库响应复杂操作
CREATE FUNCTION trigger_function() RETURNS TRIGGER AS $$
BEGIN
    RAISE NOTICE 'Trigger activated';
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER test_trigger 
AFTER INSERT ON test_fuzz 
FOR EACH ROW EXECUTE PROCEDURE trigger_function();