-- Test case ID: 12345
-- Description: Comprehensive test covering DDL, DML, queries with joins, subqueries, aggregates, and edge cases.

-- Create tables with various data types and constraints
CREATE TABLE test_table (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    value INT UNIQUE,
    description JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE related_table (
    id SERIAL PRIMARY KEY,
    fk_id INT REFERENCES test_table(id),
    status VARCHAR(50) CHECK (status IN ('active', 'inactive'))
);

-- Insert data with edge cases and NULL values
INSERT INTO test_table (name, value, description)
VALUES 
('Test1', 1, '{"key": "value"}'),
('Test2', 2, '{"array": [1, 2, 3]}'),
(NULL, -2147483648, NULL); -- Edge case for integer minimum

-- Test ALTER TABLE operations
ALTER TABLE test_table ADD COLUMN new_col BOOLEAN DEFAULT FALSE;
ALTER TABLE test_table RENAME COLUMN description TO details;
ALTER TABLE related_table ADD CONSTRAINT unique_fk UNIQUE (fk_id);

-- Complex SELECT queries with various clauses and functions
SELECT 
    t.id, 
    r.status,
    COUNT(*) OVER () as total_rows,
    ROW_NUMBER() OVER (ORDER BY t.id) as row_num
FROM 
    test_table t
LEFT JOIN 
    related_table r ON t.id = r.fk_id
WHERE 
    t.name IS NOT NULL AND t.value > 0
GROUP BY 
    t.id, r.status
HAVING 
    COUNT(r.id) > 1
ORDER BY 
    t.id DESC NULLS LAST;

-- Test subqueries and CTEs
WITH cte AS (
    SELECT id FROM test_table WHERE name LIKE 'Test%'
)
SELECT * FROM cte c JOIN related_table r ON c.id = r.fk_id;

-- Update and delete operations with conditions
UPDATE test_table 
SET new_col = TRUE, value = 1000 
WHERE id IN (SELECT id FROM test_table WHERE value < 0);

DELETE FROM related_table 
WHERE status = 'inactive' AND fk_id NOT IN (SELECT id FROM test_table WHERE name IS NULL);

-- Test indexes and performance hints
CREATE INDEX idx_value ON test_table(value);
EXPLAIN ANALYZE SELECT * FROM test_table WHERE value = 1000;

-- Triggers for testing event handling
CREATE OR REPLACE FUNCTION trigger_function()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.value < 0 THEN
        RAISE NOTICE 'Negative value detected';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER test_trigger BEFORE INSERT ON test_table 
FOR EACH ROW EXECUTE PROCEDURE trigger_function();

-- Test transactions and error handling
BEGIN;
    INSERT INTO test_table (name, value) VALUES ('TestTransaction', 500);
    -- Simulate an error condition
    SELECT 1/0;
ROLLBACK;

-- Cleanup statements
DROP TRIGGER test_trigger ON test_table;
DROP FUNCTION trigger_function();
DROP INDEX idx_value;
DROP TABLE related_table, test_table;