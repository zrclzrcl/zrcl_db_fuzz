-- Create a table with various data types and constraints
CREATE TABLE test_table (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    value NUMERIC(10, 2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50) CHECK (status IN ('active', 'inactive'))
);

-- Insert sample data into the table
INSERT INTO test_table (name, value)
VALUES
('Item 1', 100.50),
('Item 2', 200.75),
('Item 3', NULL),
('Item 4', 400.00);

-- Update rows using a CTE
WITH cte AS (
    SELECT id, value * 0.9 AS discounted_value
    FROM test_table
    WHERE status = 'active'
)
UPDATE test_table t
SET value = c.discounted_value
FROM cte c
WHERE t.id = c.id;

-- Begin a transaction with serializable isolation level
BEGIN ISOLATION LEVEL SERIALIZABLE;
SELECT * FROM test_table WHERE name LIKE 'Item%';
-- Check for locks
SELECT locktype, mode FROM pg_locks WHERE pid = pg_backend_pid();
COMMIT;

-- Use a cursor to fetch data in parts
DECLARE c CURSOR FOR
    SELECT id, name, value
    FROM test_table
    ORDER BY created_at DESC;
FETCH 2 FROM c;
FETCH NEXT FROM c;
CLOSE c;

-- Test error handling with division by zero
BEGIN;
SELECT 100 / 0;
EXCEPTION WHEN division_by_zero THEN ROLLBACK;
END;

-- Access system catalog to check activity
SELECT pid, state, query
FROM pg_stat_activity
WHERE state = 'active';

-- Use a window function for cumulative sums
SELECT name, value,
       SUM(value) OVER (ORDER BY created_at ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_sum
FROM test_table;

-- Clean up the table
DROP TABLE test_table;