-- Create tables with sample data
CREATE TABLE tenk1 (
    unique1 int,
    two int,
    four int,
    ten int,
    twenty int,
    hundred int,
    thousand int,
    twothousand int,
    fivethous int,
    tenthous int,
    odd int,
    even int,
    stringu1 text,
    stringu2 text,
    string4 text
);

INSERT INTO tenk1 (unique1, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4)
VALUES 
(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 'AAAA', 'BBBB', 'string1'),
(2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 'CCCC', 'DDDD', 'string2'),
(3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 'EEEE', 'FFFF', 'string3');

CREATE TABLE int4_tbl (
    f1 int,
    f2 int
);

INSERT INTO int4_tbl (f1, f2)
VALUES 
(1, 10),
(2, 20),
(3, 30);

CREATE TABLE fooarr (
    f1 text,
    f2 int[],
    f3 text
);

INSERT INTO fooarr (f1, f2, f3)
VALUES 
('1', ARRAY[1, 2], 'one');

-- Create functions
CREATE FUNCTION make_record(n int) RETURNS record AS $$
DECLARE
    result record;
BEGIN
    result = ROW(n, n::text);
    RETURN result;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION make_some_array(a int, b int) RETURNS int[] AS $$
BEGIN
    RETURN ARRAY[a, b];
END;
$$ LANGUAGE plpgsql;

-- Create role for parallel testing
CREATE ROLE regress_parallel_worker;

-- Create view with security barrier
CREATE VIEW tenk1_vw_sec WITH (security_barrier) AS 
SELECT * FROM tenk1;

-- Set up initial session settings
SAVEPOINT settings;