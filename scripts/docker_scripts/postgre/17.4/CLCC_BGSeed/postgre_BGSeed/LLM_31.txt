CREATE TABLE test_edge_cases (
    id SERIAL PRIMARY KEY,
    text_field TEXT,
    numeric_field NUMERIC(10, 2),
    bool_field BOOLEAN DEFAULT FALSE,
    date_field DATE,
    ts_without_time_zone TIMESTAMP,
    ts_with_time_zone TIMESTAMPTZ,
    jsonb_field JSONB
);

INSERT INTO test_edge_cases (text_field, numeric_field, bool_field, date_field, ts_without_time_zone, ts_with_time_zone, jsonb_field) VALUES
('', -99999.99, TRUE, '1970-01-01', '2023-01-01 00:00:00', '2023-01-01 00:00:00+00', '{"key": "value"}'),
('', 99999.99, TRUE, '2050-12-31', '2023-12-31 23:59:59', '2023-12-31 23:59:59+00', '{"array": [1,2,3]}'),
('', NULL::NUMERIC, FALSE, NULL::DATE, NULL::TIMESTAMP, NULL::TIMESTAMPTZ, NULL::JSONB),
('测试字符串', 123.45, TRUE, '2023-07-20', '2023-07-20 12:34:56', '2023-07-20 12:34:56+08', '{"name": "测试"}');

UPDATE test_edge_cases SET bool_field = NOT bool_field WHERE id % 2 = 0;

CREATE INDEX idx_text_pattern ON test_edge_cases USING GIN (text_field gin_trgm_ops);
CREATE INDEX idx_numeric ON test_edge_cases (numeric_field DESC NULLS LAST);
CREATE INDEX idx_date ON test_edge_cases (date_field);

CREATE OR REPLACE FUNCTION get_current_time(volatile_flag BOOLEAN)
RETURNS TIMESTAMP WITH TIME ZONE
AS $$
    IF volatile_flag THEN
        RETURN now();
    ELSE
        RETURN '2023-07-20 12:34:56+08'::TIMESTAMPTZ;
    END IF;
$$ LANGUAGE PLPGSQL;

VACUUM ANALYZE test_edge_cases;

SELECT id, text_field, numeric_field, bool_field,
       date_field, ts_without_time_zone, ts_with_time_zone,
       jsonb_field
FROM test_edge_cases
WHERE (ts_with_time_zone AT TIME ZONE 'UTC' - ts_without_time_zone) < INTERVAL '1 hour'
ORDER BY get_current_time(bool_field);

EXPLAIN (ANALYZE ON)
SELECT COUNT(*) FROM test_edge_cases WHERE text_field LIKE '%测试%';

DO $$
BEGIN
    FOR i IN 1..5 LOOP
        INSERT INTO test_edge_cases (text_field, numeric_field) VALUES ('Loop ' || i, i * 100.5);
    END LOOP;
END $$;

DROP TABLE IF EXISTS test_edge_cases;