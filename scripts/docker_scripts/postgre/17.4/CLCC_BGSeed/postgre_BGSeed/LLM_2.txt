-- 创建基础表结构，包含多种数据类型
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age INT CHECK (age >= 0),
    hire_date DATE DEFAULT CURRENT_DATE,
    is_active BOOLEAN DEFAULT TRUE
);

-- 创建具有外键约束的表以测试关系型数据库特性
CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(50) UNIQUE NOT NULL,
    manager_id INT REFERENCES employees(id)
);

-- 插入多样化数据，包含边界条件和边缘情况
INSERT INTO employees (name, age, hire_date, is_active) 
VALUES 
('John Doe', 30, '2020-01-15', TRUE),
('Jane Smith', 45, '2018-07-22', FALSE),
('', 0, CURRENT_DATE, TRUE), -- 测试空字符串和边界年龄
('Max Mustermann', 150, '1999-12-31', TRUE);

-- 创建索引以测试查询优化器行为
CREATE INDEX idx_employee_age ON employees(age);
CREATE UNIQUE INDEX uniq_dept_name ON departments(dept_name);

-- 插入部门数据并建立外键关系
INSERT INTO departments (dept_name, manager_id)
VALUES 
('Engineering', 1),
('HR', 2),
('Marketing', NULL); -- 测试NULL值

-- 更新操作测试
UPDATE employees SET age = 35 WHERE id = 1;
UPDATE departments SET dept_name = 'Software Engineering' WHERE dept_id = 1;

-- 删除操作测试
DELETE FROM departments WHERE dept_id = 3;
DELETE FROM employees WHERE name = '';

-- 复杂查询，包含聚合函数和窗口函数
SELECT 
    COUNT(*) AS total_employees,
    AVG(age) AS avg_age,
    MAX(hire_date) AS latest_hire_date
FROM employees;

-- 使用窗口函数进行排名测试
SELECT 
    id, name, hire_date,
    ROW_NUMBER() OVER (ORDER BY hire_date DESC) AS rank_by_date,
    RANK() OVER (PARTITION BY is_active ORDER BY age ASC) AS age_rank
FROM employees;

-- 事务控制测试
BEGIN;
INSERT INTO departments (dept_name, manager_id)
VALUES ('TestDept', 3);
SAVEPOINT sp1;
DELETE FROM departments WHERE dept_name = 'TestDept';
ROLLBACK TO sp1;
COMMIT;

-- 复杂条件查询和连接操作
SELECT 
    e.name AS employee_name,
    d.dept_name AS department,
    e.age,
    CASE WHEN e.is_active THEN 'Active' ELSE 'Inactive' END AS status
FROM employees e
LEFT JOIN departments d ON e.id = d.manager_id
WHERE e.age > 30 OR (e.hire_date >= '2020-01-01' AND d.dept_name IS NOT NULL)
ORDER BY e.name DESC;