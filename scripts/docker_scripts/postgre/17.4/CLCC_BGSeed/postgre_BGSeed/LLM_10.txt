-- 创建一个包含各种数据类型的表，用于测试不同的数据类型边界条件
CREATE TABLE test_edge_cases (
    id SERIAL PRIMARY KEY,
    numeric_col NUMERIC(30, 15),
    text_col TEXT CHECK (text_col ~ '^[a-zA-Z]+$'),
    jsonb_col JSONB,
    array_col INT[],
    timestamp_col TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- 插入包含边界条件和特殊字符的数据，用于测试数据处理的正确性
INSERT INTO test_edge_cases 
VALUES (
    DEFAULT, 
    '999999999999999999999999999.999999999',  -- 测试大数边界
    'TeStInG!@#$%^&*()_+-=', 
    '{"key": "value", "array": [1,2,3], "nested": {"object": true}}',
    '{1,2,3,4,5}',
    '2023-10-27 12:34:56+08'
);

-- 测试数组和JSONB的复杂查询
SELECT 
    array_col,
    jsonb_col->'key' AS extracted_value,
    jsonb_array_elements_text(jsonb_col->'array') AS array_element
FROM test_edge_cases;

-- 使用窗口函数和CTE进行复杂的计算，测试性能和正确性
WITH cte AS (
    SELECT 
        id, 
        numeric_col,
        RANK() OVER (ORDER BY numeric_col DESC) AS rank
    FROM test_edge_cases
)
SELECT * FROM cte WHERE rank <= 10;

-- 测试事务控制和错误处理，确保数据库一致性
BEGIN;
INSERT INTO test_edge_cases VALUES (
    DEFAULT, 
    '123456789.12345', 
    'Transaction Test',
    '{"transaction": true}',
    '{6,7,8,9,10}',
    CURRENT_TIMESTAMP
);
SAVEPOINT my_savepoint;
UPDATE test_edge_cases SET text_col = 'Updated Text' WHERE id = 1;
ROLLBACK TO my_savepoint;
COMMIT;

-- 测试PostgreSQL特有的操作符和函数，确保覆盖更多功能
SELECT 
    array_col[1] AS first_element,
    jsonb_col->>'key' AS key_value,
    LENGTH(text_col) AS text_length,
    EXTRACT(YEAR FROM timestamp_col) AS year_extracted
FROM test_edge_cases;

-- 测试边界条件和异常处理，确保程序健壮性
DO $$
BEGIN
    RAISE NOTICE 'Starting transaction';
    INSERT INTO test_edge_cases VALUES (
        DEFAULT, 
        '123456789.12345', 
        REPEAT('a', 1000),  -- 测试长字符串边界
        '{"error": false}',
        '{11,22,33,44,55}',
        CURRENT_TIMESTAMP
    );
    RAISE EXCEPTION 'Test exception';  -- 故意触发异常，测试错误处理
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Exception caught: %', SQLERRM;
END$$;

-- 清理数据，保持数据库状态整洁
DELETE FROM test_edge_cases WHERE id > 0;