-- Create tables with various data types and relationships
CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    price NUMERIC(10, 2) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE sales (
    sale_id SERIAL PRIMARY KEY,
    product_id INT REFERENCES products(product_id),
    sale_date DATE NOT NULL,
    quantity INT CHECK (quantity > 0),
    total_amount NUMERIC(10, 2) NOT NULL,
    CONSTRAINT fk_product FOREIGN KEY (product_id) REFERENCES products(product_id)
);

CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT UNIQUE,
    dob DATE
);

-- Create indexes on frequently queried columns
CREATE INDEX idx_product_name ON products(name);
CREATE INDEX idx_sale_date ON sales(sale_date);
CREATE INDEX idx_customer_email ON customers(email);

-- Insert data with edge cases and boundary conditions
INSERT INTO products (name, price, description) VALUES
('Laptop', 999.99, 'High-performance laptop'),
('Smartphone', 699.99, NULL),
('Tablet', 299.99, 'Lightweight tablet');

-- Insert into sales with foreign key references and edge dates
INSERT INTO sales (product_id, sale_date, quantity, total_amount) VALUES
(1, '2023-01-01', 5, 4999.95),
(2, '1970-01-01', 10, 6999.90),
(3, '2023-12-31', 0, 0); -- Testing boundary condition

-- Update statements with conditional logic
UPDATE sales SET quantity = 6 WHERE sale_id = 1;
UPDATE products SET price = 899.99 WHERE product_id = 1;

-- Delete operations based on specific criteria
DELETE FROM sales WHERE sale_date < '2023-01-01';

-- Join operations to combine data from related tables
SELECT p.name, s.sale_date, s.quantity 
FROM products p
JOIN sales s ON p.product_id = s.product_id;

-- Transaction example with rollback
BEGIN;
INSERT INTO customers (name, email) VALUES ('Test Customer', 'test@example.com');
SAVEPOINT my_savepoint;
INSERT INTO sales (product_id, sale_date, quantity, total_amount) 
VALUES (1, CURRENT_DATE, 2, 1999.98);
ROLLBACK TO my_savepoint;
COMMIT;

-- Create a view for aggregated sales data
CREATE VIEW product_sales AS
SELECT p.name, SUM(s.total_amount) as total_sales
FROM products p
JOIN sales s ON p.product_id = s.product_id
GROUP BY p.name;

-- Use CTE to calculate running totals
WITH sales_rank AS (
    SELECT sale_date, total_amount,
           ROW_NUMBER() OVER (ORDER BY sale_date) as rn
    FROM sales
)
SELECT * FROM sales_rank;

-- Window function for ranking sales
SELECT sale_date, total_amount,
       RANK() OVER (ORDER BY total_amount DESC) as sale_rank
FROM sales;

-- Add constraints to ensure data integrity
ALTER TABLE sales ADD CONSTRAINT chk_quantity CHECK (quantity > 0);