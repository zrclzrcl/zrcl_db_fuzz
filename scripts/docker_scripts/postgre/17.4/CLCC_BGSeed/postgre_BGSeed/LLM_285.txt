-- Test case for PostgreSQL fuzz testing

-- Create a test table with various data types
CREATE TABLE IF NOT EXISTS fuzz_test (
    id SERIAL PRIMARY KEY,
    int_col INTEGER,
    text_col TEXT,
    timestamp_col TIMESTAMP
);

-- Insert edge cases into the table
INSERT INTO fuzz_test (int_col, text_col, timestamp_col) VALUES 
(2147483647, '', 'infinity'),
(-2147483648, NULL, '1970-01-01 00:00:00'),
(0, 'test_string', CURRENT_TIMESTAMP);

-- Create indexes on different columns
CREATE INDEX idx_int_col ON fuzz_test (int_col);
CREATE INDEX idx_text_col ON fuzz_test (text_col);

-- Test transaction snapshots and visibility
BEGIN;
SELECT txid_current() \gset
INSERT INTO fuzz_test (int_col, text_col) VALUES (123, 'test');
COMMIT;

BEGIN;
SELECT txid_current() AS current_txid \gset
SELECT * FROM fuzz_test WHERE id = 1;
COMMIT;

-- Complex query with joins and aggregates
SELECT f1.id, f2.id, COUNT(*)
FROM fuzz_test f1
JOIN fuzz_test f2 ON f1.int_col = f2.int_col
GROUP BY f1.id, f2.id;

-- Test stored procedure with error handling
CREATE OR REPLACE FUNCTION test_error_handling()
RETURNS VOID AS $$
BEGIN
    -- This will raise an error due to division by zero
    RAISE NOTICE 'Attempting division by zero';
    PERFORM 1 / 0;
EXCEPTION
    WHEN division_by_zero THEN
        RAISE NOTICE 'Caught division_by_zero exception';
END;
$$ LANGUAGE plpgsql;

SELECT test_error_handling();

-- Test concurrency with transactions and locks
BEGIN;
LOCK TABLE fuzz_test IN SHARE ROW EXCLUSIVE MODE;
INSERT INTO fuzz_test (int_col) VALUES (456);
COMMIT;

-- Cleanup
DROP FUNCTION IF EXISTS test_error_handling();
DROP TABLE IF EXISTS fuzz_test;