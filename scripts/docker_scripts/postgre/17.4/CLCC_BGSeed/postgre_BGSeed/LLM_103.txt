-- Create a table with various PostgreSQL-specific data types
create table test_seed (
    id serial primary key,
    name text not null,
    description text,
    created_at timestamp default current_timestamp,
    updated_at timestamptz,
    is_active boolean default true,
    score numeric(5,2),
    tags jsonb,
    points geometry(point,4326),
    data uuid
);

-- Insert sample data with edge cases and null values
insert into test_seed (name, description, created_at, updated_at, is_active, score, tags, points, data) values 
('Test1', 'Sample Description', '2023-01-01 00:00:00', '2023-01-01 00:00:00+00', true, 100.50, '{"key": "value"}', ST_GeomFromText('POINT(45.1 -75.5)',4326), '123e4567-e89b-12d3-a456-426655440000'),
('Test2', null, null, null, false, 0.00, null, null, null),
('Test3', '', '', 'infinity'::timestamp, '-infinity'::timestamptz, true, 99999.99, '[]'::jsonb, ST_GeomFromText('POINT(180 -90)',4326), 'ffffffff-ffff-ffff-ffff-ffffffffffff');

-- Create indexes with different types
create index idx_gin on test_seed using gin(tags);
create index idx_gist on test_seed using gist(points);

-- Test various SELECT statements and functions
select id, name, description, created_at::date, updated_at at time zone 'UTC', 
       is_active, score + 10 as adjusted_score, tags->'key',
       ST_X(points) as longitude,
       data || '-' || name as combined_data
from test_seed;

-- Test aggregate functions and window functions
select count(*), sum(score), avg(score), max(id), min(created_at)
from test_seed
where score > 50.00
window w as (partition by is_active order by created_at);

-- Test joins and subqueries
select t1.name, t2.description
from test_seed t1
join (
    select id, description from test_seed where is_active = true
) t2 on t1.id = t2.id;

-- Test transactions and error handling
begin;
insert into test_seed (name, score) values ('TestTransaction', 100.50);
savepoint sp1;
update test_seed set score = -100.50 where name = 'TestTransaction';
rollback to sp1;
commit;

-- Test edge cases with special operators and functions
select 
    coalesce(description, 'N/A') as desc,
    nullif(score, 0) as non_zero_score,
    greatest(id, 100) as max_id,
    least(created_at, '2023-01-01'::timestamp) as earliest_date,
    width_bucket(score, 0, 100, 5) as score_bucket
from test_seed;

-- Test recursive CTE and advanced queries
with recursive cte(id, name, level) as (
    select id, name, 1 from test_seed where is_active = true
    union all
    select t.id, t.name || '.' || c.level::text, c.level + 1
    from test_seed t join cte c on t.id = c.id
    where c.level < 3
)
select * from cte;

-- Test triggers and constraints (commented out for safety)
/*
create trigger trg_test before insert on test_seed
for each row execute function check_data();

alter table test_seed add constraint chk_score check (score between 0 and 100);
*/