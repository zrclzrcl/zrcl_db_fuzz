-- Basic SELECT with ORDER BY and LIMIT
SELECT thousand, unique1 
FROM onek 
WHERE thousand < 500 
ORDER BY unique1 DESC 
LIMIT 10;

-- Aggregate functions with GROUP BY
SELECT thousand, COUNT(unique1) as total_uniques
FROM tenk1 
GROUP BY thousand 
HAVING COUNT(unique1) > 50;

-- Window function example
SELECT id, name, ROW_NUMBER() OVER (ORDER BY salary DESC)
FROM employees 
WHERE department = 'Engineering';

-- INNER JOIN between two tables
SELECT t1.id, t2.name 
FROM table1 t1
INNER JOIN table2 t2 ON t1.id = t2.table1_id;

-- CTE example
WITH sales_summary AS (
    SELECT region, SUM(amount) as total_sales
    FROM sales
    GROUP BY region
)
SELECT region, total_sales
FROM sales_summary
WHERE total_sales > 100000;

-- UNION of two SELECT statements
SELECT id, name 
FROM customers 
WHERE country = 'USA'
UNION
SELECT id, name 
FROM customers 
WHERE country = 'Canada';

-- Subquery example
SELECT id, name 
FROM products 
WHERE price > (SELECT AVG(price) FROM products);

-- EXPLAIN for query optimization
EXPLAIN ANALYZE
SELECT * 
FROM large_table 
WHERE category = 'Electronics' AND price < 100;

-- Transaction and lock example
BEGIN;
SELECT * FROM orders WHERE order_id = 123 FOR UPDATE;
UPDATE orders SET status = 'shipped' WHERE order_id = 123;
COMMIT;

-- Materialized view example
CREATE MATERIALIZED VIEW mv_sales AS
SELECT region, SUM(amount) as total_sales
FROM sales 
GROUP BY region 
ORDER BY total_sales DESC;

-- Full-text search example
SELECT title, body 
FROM articles 
WHERE to_tsvector('english', body) @@ to_tsquery('english', 'postgresql & tutorial');

-- JSON operations example
SELECT data->>'name' as name,
       data->'attributes'->>'type' as type
FROM json_data 
WHERE data @> '{"status": "active"}';

-- Handling NULL values with COALESCE
SELECT id, COALESCE(email, 'no_email@example.com') as email
FROM users;