CREATE SCHEMA test_schema;
CREATE TABLE test_schema.test_table (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    value INT CHECK (value > 0),
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
ALTER TABLE test_schema.test_table ADD COLUMN description TEXT;
ALTER TABLE test_schema.test_table ADD CONSTRAINT unique_name UNIQUE (name);
CREATE INDEX idx_value ON test_schema.test_table (value) WHERE value > 100;
CREATE ROLE test_role WITH LOGIN PASSWORD 'test_password';
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA test_schema TO test_role;
REVOKE UPDATE ON test_schema.test_table FROM test_role;
CREATE FUNCTION test_schema.trigger_func() RETURNS TRIGGER AS $$
BEGIN
    IF NEW.value < 1 THEN
        RAISE EXCEPTION 'Value must be greater than 0';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
CREATE TRIGGER test_trigger BEFORE INSERT OR UPDATE ON test_schema.test_table FOR EACH ROW EXECUTE FUNCTION test_schema.trigger_func();
ALTER TABLE test_schema.test_table ADD CONSTRAINT fk_test FOREIGN KEY (id) REFERENCES test_schema.parent_table(id);