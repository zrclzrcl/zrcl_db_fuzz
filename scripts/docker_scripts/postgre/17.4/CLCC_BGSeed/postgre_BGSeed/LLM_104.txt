-- Initial seed for PostgreSQL testing

-- Create test tables
CREATE TABLE gtest26 (
    a int,
    b int GENERATED ALWAYS AS (a * 2) STORED
);

CREATE TABLE gtest28a (
    a int,
    b int,
    c int,
    x int GENERATED ALWAYS AS (b * 2) STORED
);

-- Create test functions
CREATE FUNCTION gtest_trigger_func() 
RETURNS trigger 
LANGUAGE plpgsql
AS $$
BEGIN  
    IF tg_op IN ('DELETE', 'UPDATE') THEN    
        RAISE INFO '%: %: old = %', TG_NAME, TG_WHEN, OLD;
    END IF;

    IF tg_op IN ('INSERT', 'UPDATE') THEN    
        RAISE INFO '%: %: new = %', TG_NAME, TG_WHEN, NEW;
    END IF;

    IF tg_op = 'DELETE' THEN    
        RETURN OLD;
    ELSE    
        RETURN NEW;
    END IF;
END;
$$;

CREATE FUNCTION gtest_trigger_func3() 
RETURNS trigger 
LANGUAGE plpgsql
AS $$
BEGIN  
    RAISE NOTICE 'OK';
    RETURN NEW;
END;
$$;

-- Create test triggers
CREATE TRIGGER gtest1 
BEFORE DELETE OR UPDATE ON gtest26  
FOR EACH ROW  
WHEN (OLD.b < 0)    
EXECUTE PROCEDURE gtest_trigger_func();

CREATE TRIGGER gtest2a 
BEFORE INSERT OR UPDATE ON gtest26  
FOR EACH ROW  
WHEN (NEW.b < 0)    
EXECUTE PROCEDURE gtest_trigger_func();

CREATE TRIGGER gtest2b 
BEFORE INSERT OR UPDATE ON gtest26  
FOR EACH ROW  
WHEN (NEW.* IS NOT NULL)    
EXECUTE PROCEDURE gtest_trigger_func();

CREATE TRIGGER gtest3 
AFTER DELETE OR UPDATE ON gtest26  
FOR EACH ROW  
WHEN (OLD.b < 0)    
EXECUTE PROCEDURE gtest_trigger_func();

CREATE TRIGGER gtest4 
AFTER INSERT OR UPDATE ON gtest26  
FOR EACH ROW  
WHEN (NEW.b < 0)    
EXECUTE PROCEDURE gtest_trigger_func();

-- Insert test data
INSERT INTO gtest26 (a) VALUES (-2), (0), (3);
SELECT * FROM gtest26 ORDER BY a;

-- Test update operations
UPDATE gtest26 SET a = -4 WHERE a = -2;
SELECT * FROM gtest26 ORDER BY a;

-- Test delete operations
DELETE FROM gtest26 WHERE a = 3;
SELECT * FROM gtest26 ORDER BY a;