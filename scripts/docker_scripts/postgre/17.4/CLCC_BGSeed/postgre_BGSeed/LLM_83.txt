CREATE SCHEMA test_schema;
SET search_path TO test_schema;

CREATE TABLE test_table (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    data JSONB,
    UNIQUE (name),
    CHECK (created_at <= updated_at)
);

CREATE INDEX idx_name ON test_table (name);
CREATE UNIQUE INDEX idx_unique_col ON test_table (description);
CREATE INDEX idx_multi_col ON test_table (id, name);
CREATE INDEX idx_partial ON test_table (id) WHERE is_active = TRUE;

CREATE TABLE referenced_table (
    id SERIAL PRIMARY KEY,
    ref_id INTEGER REFERENCES test_table(id) ON DELETE CASCADE
);

CREATE TABLE inheritance_test (
    id SERIAL INHERITS test_table
);

CREATE FUNCTION trigger_function() RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'UPDATE' THEN
        INSERT INTO log_table VALUES (OLD.id, OLD.name, NOW());
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO log_table VALUES (OLD.id, OLD.name, NOW());
        RETURN OLD;
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER test_trigger AFTER UPDATE OR DELETE ON test_table FOR EACH ROW EXECUTE FUNCTION trigger_function();

CREATE VIEW test_view AS SELECT id, name, description FROM test_table WHERE is_active = TRUE;

CREATE MATERIALIZED VIEW mv_test TABLESPACE pg_default AS
SELECT id, name, created_at FROM test_table;
refresh materialized view mv_test with data;

CREATE EXTENSION IF NOT EXISTS uuid-ossp;
CREATE EXTENSION IF NOT EXISTS pg_trgm;

INSERT INTO test_table (name, description, is_active)
VALUES ('Test1', 'This is a test description.', TRUE),
       ('Test2', NULL, FALSE);

ALTER TABLE test_table ADD COLUMN new_col INT DEFAULT 0;

UPDATE test_table SET name = 'UpdatedName' WHERE id IN (SELECT id FROM referenced_table);