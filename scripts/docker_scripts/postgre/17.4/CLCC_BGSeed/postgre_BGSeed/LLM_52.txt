-- Create a simple table with various constraints and indexes
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    position VARCHAR(50),
    salary DECIMAL(10, 2) CHECK (salary > 0),
    department_id INT,
    hire_date DATE DEFAULT CURRENT_DATE,
    status VARCHAR(20) CHECK (status IN ('active', 'inactive'))
);

-- Add unique constraint
ALTER TABLE employees ADD CONSTRAINT emp_unique UNIQUE (name, position);

-- Create indexes
CREATE INDEX idx_name ON employees(name);
CREATE INDEX idx_dept_id ON employees(department_id);

-- Add comments to columns
COMMENT ON COLUMN employees.id IS 'Unique identifier for the employee';
COMMENT ON COLUMN employees.name IS 'Employee full name';

-- Create a table that inherits from another table
CREATE TABLE employees_part (
    LIKE employees INCLUDING ALL
) PARTITION BY LIST (status);

-- Create partitions
CREATE TABLE employees_active PARTITION OF employees_part FOR VALUES IN ('active');
CREATE TABLE employees_inactive PARTITION OF employees_part FOR VALUES IN ('inactive');

-- Create a supporting table for department information
CREATE TABLE departments (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(50) NOT NULL UNIQUE,
    location VARCHAR(100)
);

-- Add foreign key constraint
ALTER TABLE employees ADD CONSTRAINT emp_dept_fk FOREIGN KEY (department_id) REFERENCES departments(dept_id);

-- Insert sample data
INSERT INTO departments VALUES (1, 'Engineering', 'New York');
INSERT INTO departments VALUES (2, 'Marketing', 'San Francisco');

INSERT INTO employees (name, position, salary, department_id) 
VALUES ('John Doe', 'Software Engineer', 85000.00, 1),
       ('Jane Smith', 'Product Manager', 95000.00, 2);

-- Create a view for reporting
CREATE VIEW emp_summary AS
SELECT e.name, e.position, d.dept_name, e.salary 
FROM employees e
JOIN departments d ON e.department_id = d.dept_id;