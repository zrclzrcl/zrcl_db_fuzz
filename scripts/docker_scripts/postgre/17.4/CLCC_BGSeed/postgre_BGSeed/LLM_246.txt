-- Initial seed for PostgreSQL database fuzz testing

-- Create a table with various data types including special PostgreSQL types
CREATE TABLE test_table (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    status BOOLEAN NOT NULL,
    amount NUMERIC(10, 2),
    data JSONB,
    unique_id UUID UNIQUE
);

-- Add a constraint to the table
ALTER TABLE test_table ADD CONSTRAINT positive_amount CHECK (amount > 0);

-- Insert sample data with different types and expressions
INSERT INTO test_table (name, description, status, amount, data, unique_id)
VALUES 
('Test Item 1', 'This is a test item.', true, 100.50, '{"key": "value"}', uuid_generate_v4()),
('Test Item 2', NULL, false, 200.75, NULL, uuid_generate_v1());

-- Update a row
UPDATE test_table SET status = NOT status WHERE id = 1;

-- Delete a specific row
DELETE FROM test_table WHERE name = 'Test Item 2';

-- Complex SELECT with JOIN and subquery
SELECT t.id, u.name AS user_name, t.description 
FROM test_table t 
JOIN (
    SELECT id, name FROM users WHERE active = true
) u ON t.user_id = u.id;

-- Use window functions and CTEs
WITH ranked_data AS (
    SELECT id, name, ROW_NUMBER() OVER (ORDER BY created_at DESC) AS rank
    FROM test_table
)
SELECT * FROM ranked_data WHERE rank <= 5;

-- Test DISTINCT ON clause for ordered unique results
SELECT DISTINCT ON (status) status, COUNT(*) 
FROM test_table 
GROUP BY status;

-- Test UNION and INTERSECT operations
(SELECT id, name FROM test_table WHERE amount > 100)
UNION
(SELECT id, name FROM other_table WHERE active = true);

-- Aggregate functions with group by and having clauses
SELECT status, COUNT(*) AS total_count, SUM(amount) AS total_amount 
FROM test_table 
GROUP BY status 
HAVING COUNT(*) > 5;