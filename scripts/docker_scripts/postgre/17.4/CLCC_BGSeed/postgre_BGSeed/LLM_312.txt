-- Create tables with various data types and indexes
CREATE TABLE IF NOT EXISTS test_table (
    id SERIAL PRIMARY KEY,
    name TEXT,
    value FLOAT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status BOOLEAN
);

CREATE INDEX idx_status ON test_table (status);
CREATE INDEX idx_created_at ON test_table (created_at DESC);

-- Insert sample data
INSERT INTO test_table(name, value, status) VALUES
('Test 1', 100.5, true),
('Test 2', -200.3, false),
('Test 3', NULL, NULL);

-- Create a view with CTE and complex query
CREATE VIEW v_complex AS
WITH cte_subtotal AS (
    SELECT name, SUM(value) as total
    FROM test_table
    GROUP BY name
)
SELECT 
    t.id,
    t.name,
    t.value,
    ct.total,
    ROW_NUMBER() OVER(ORDER BY t.created_at DESC) as rn
FROM test_table t
LEFT JOIN cte_subtotal ct ON t.name = ct.name;

-- Create a function with exception handling
CREATE OR REPLACE FUNCTION get_total_value(p_status BOOLEAN)
RETURNS FLOAT AS $$
DECLARE
    total FLOAT;
BEGIN
    SELECT SUM(value) INTO total FROM test_table WHERE status = p_status;
    RETURN COALESCE(total, 0);
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Error: %', SQLERRM;
        RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Create a stored procedure with transactions
CREATE OR REPLACE PROCEDURE update_value(p_id INT, p_increment FLOAT)
LANGUAGE plpgsql AS $$
BEGIN
    BEGIN
        UPDATE test_table SET value = value + p_increment WHERE id = p_id;
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE NOTICE 'Transaction failed: %', SQLERRM;
    END;
END;
$$;

-- Create a partitioned table
CREATE TABLE IF NOT EXISTS measurements (
    time TIMESTAMP,
    category TEXT,
    value FLOAT
) PARTITION BY RANGE (time);

CREATE TABLE measurements_y2023 PARTITION OF measurements
FOR VALUES FROM ('2023-01-01') TO ('2024-01-01');

-- Test transactions and locks
BEGIN;
SELECT * FROM test_table WHERE status = true FOR UPDATE;
SAVEPOINT sp1;
UPDATE test_table SET value = 50.0 WHERE id = 1;
ROLLBACK TO sp1;
COMMIT;

-- Query with various features
SELECT 
    t.id,
    t.name,
    t.value,
    get_total_value(t.status) as total_status,
    (t.value * 2) as doubled_value
FROM test_table t
JOIN v_complex vc ON t.id = vc.id
WHERE t.status IS NOT NULL
GROUP BY t.id, t.name, t.value
HAVING SUM(value) > 100
ORDER BY t.created_at DESC;

-- Test DISTINCT ON and other features
SELECT DISTINCT ON (status)
    status,
    COUNT(*) as count_status,
    MAX(value) as max_value
FROM test_table
GROUP BY status;