-- Create a schema to organize test objects
CREATE SCHEMA test_schema;

-- Create a table with various data types and constraints
CREATE TABLE test_schema.test_table (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    age INTEGER CHECK (age >= 0),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    metadata JSONB,
    UNIQUE (name)
);

-- Create a table with specific PostgreSQL data types
CREATE TABLE test_schema.uuid_table (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    content TEXT NOT NULL
);

-- Create an inheritance table
CREATE TABLE test_schema.test_inheritance (
    inherited_id INTEGER
) INHERITS (test_schema.test_table);

-- Insert sample data into the tables
INSERT INTO test_schema.test_table (name, age, metadata)
VALUES ('Alice', 30, '{"job": "Engineer", "department": "Tech"}'),
       ('Bob', 25, '{"job": "Designer", "department": "Creative"}');

INSERT INTO test_schema.uuid_table (content)
VALUES ('Sample content for UUID table');

-- Create indexes to test different index types
CREATE INDEX idx_name ON test_schema.test_table (name);
CREATE INDEX idx_age_desc ON test_schema.test_table (age DESC);
CREATE INDEX idx_metadata ON test_schema.test_table USING GIN (metadata);

-- Complex queries testing joins, subqueries, and aggregates
SELECT t.name, u.content 
FROM test_schema.test_table t 
JOIN test_schema.uuid_table u ON t.id = u.id 
WHERE t.age > 25;

SELECT COUNT(*) as total_employees, 
       AVG(age) as average_age,
       MAX(created_at) as last_created
FROM test_schema.test_table;

-- Create a materialized view for testing
CREATE MATERIALIZED VIEW test_schema.employee_summary AS
SELECT name, age, is_active
FROM test_schema.test_table
WHERE is_active = TRUE;

-- Partitioned table example
CREATE TABLE test_schema.partitioned_data (
    id INTEGER,
    data TEXT
) PARTITION BY RANGE (id);

CREATE TABLE test_schema.partition_1 PARTITION OF test_schema.partitioned_data
FOR VALUES FROM (0) TO (100);

-- Trigger function and trigger setup
CREATE FUNCTION test_schema.log_activity() RETURNS TRIGGER AS $$
BEGIN
    RAISE NOTICE 'Activity logged: %', NEW.name;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER activity_trigger
BEFORE INSERT ON test_schema.test_table
FOR EACH ROW EXECUTE PROCEDURE test_schema.log_activity();