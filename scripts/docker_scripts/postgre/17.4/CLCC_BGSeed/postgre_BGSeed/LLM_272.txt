-- Initial seed for PostgreSQL fuzz testing
CREATE TABLE test_table (
    id SERIAL PRIMARY KEY,
    text_col TEXT,
    int_col INTEGER,
    float_col FLOAT,
    bool_col BOOLEAN,
    date_col DATE,
    time_col TIME(6),
    timestamp_col TIMESTAMP WITH TIME ZONE,
    interval_col INTERVAL,
    json_col JSONB,
    uuid_col UUID
);

INSERT INTO test_table (text_col, int_col, float_col, bool_col, date_col, time_col, timestamp_col, interval_col, json_col, uuid_col)
VALUES 
    ('test', 123, 45.67, TRUE, '2023-10-01', '12:34:56.789', '2023-10-01 12:34:56+00', '1 day 2 hours', '{"key": "value"}', '123e4567-e89b-12d3-a456-426614174000'),
    ('boundary', -2147483648, -9.999999999999999, FALSE, '1970-01-01', '00:00:00.000', '1970-01-01 00:00:00+00', '-2 years', '{"array": [1,2,3]}', 'deadbeef-cafe-babe-f00d-deadbeef0000');

SELECT * FROM test_table WHERE int_col = -2147483648;
SELECT text_col AS "Text Column" FROM test_table WHERE bool_col IS TRUE;
SELECT float_col + 1.5 AS "Float Plus One Point Five" FROM test_table;
SELECT date_col + interval '1 month' AS "Next Month's Date" FROM test_table;

CREATE TABLE test_join (
    id SERIAL PRIMARY KEY,
    fk_id INTEGER REFERENCES test_table(id),
    name TEXT
);

INSERT INTO test_join (fk_id, name)
VALUES 
    (1, 'Join Test 1'),
    (2, 'Join Test 2');

SELECT t.text_col, j.name FROM test_table t INNER JOIN test_join j ON t.id = j.fk_id;
SELECT t.text_col, j.name FROM test_table t LEFT JOIN test_join j ON t.id = j.fk_id;

CREATE TABLE test_index (
    id SERIAL PRIMARY KEY,
    value TEXT
);

INSERT INTO test_index (value)
VALUES 
    ('a'),
    ('b'),
    ('c');

SELECT * FROM test_index ORDER BY value DESC;
SELECT * FROM test_index WHERE value LIKE 'a%';

ALTER TABLE test_table ADD COLUMN new_col TEXT;

CREATE INDEX idx_text_col ON test_table (text_col);

SELECT EXTRACT(YEAR FROM timestamp_col) AS "Year Extracted" FROM test_table;
SELECT NOW() - interval_col AS "Time Difference" FROM test_table;
SELECT AGE(date_col, '2023-10-01') AS "Age Calculation" FROM test_table;

WITH cte AS (
    SELECT id, text_col FROM test_table WHERE int_col > 100
)
SELECT * FROM cte;

BEGIN;
INSERT INTO test_table (text_col) VALUES ('transaction test');
SAVEPOINT sp1;
DELETE FROM test_table WHERE text_col = 'transaction test';
ROLLBACK TO sp1;
COMMIT;

SELECT id, ROW_NUMBER() OVER (ORDER BY id) AS "Row Number" FROM test_table;

SELECT COUNT(*) AS "Total Rows", SUM(int_col) AS "Sum of Integers" FROM test_table GROUP BY bool_col HAVING COUNT(*) > 1;

SELECT json_col ->> 'key' AS "JSON Key Value" FROM test_table;
SELECT uuid_col::TEXT AS "UUID as Text" FROM test_table;

SELECT time_col + time '01:00:00.5' AS "Time Addition" FROM test_table;
SELECT timestamp_col AT TIME ZONE 'UTC' AS "Timestamp in UTC" FROM test_table;