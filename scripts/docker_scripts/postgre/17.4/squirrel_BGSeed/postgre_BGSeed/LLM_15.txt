-- 创建测试表，包含多种数据类型和约束条件
CREATE TABLE test_table (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    age INT CHECK (age >= 0),
    balance DECIMAL(10, 2) DEFAULT 0.00,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT true
);

-- 插入测试数据，包括边界值和特殊字符
INSERT INTO test_table (name, age, balance, created_at, is_active)
VALUES 
('Alice', 18, 100.50, '2023-01-01 12:00:00+00', true),
('Bob', 65, 999999999.99, '2024-01-01 00:00:00+00', false),
('', 30, -0.00, '2023-07-01 23:59:59+00', true),
('Charlie', NULL, 123456.78, DEFAULT, true);

-- 创建索引以测试查询性能和边界条件
CREATE UNIQUE INDEX idx_unique_name ON test_table (name);
CREATE INDEX idx_partial_age ON test_table (age) WHERE age > 18;

-- 创建视图以测试复杂查询和子查询
CREATE VIEW test_view AS
SELECT 
    id,
    name,
    age,
    balance,
    created_at,
    is_active,
    (balance * 2) as doubled_balance
FROM test_table
WHERE is_active = true;

-- 创建存储过程以测试函数调用和异常处理
CREATE OR REPLACE PROCEDURE test_procedure(IN p_age INT, OUT result_count INT)
AS $$
BEGIN
    SELECT COUNT(*) INTO result_count FROM test_table WHERE age >= p_age;
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'An error occurred: %', SQLERRM;
        result_count := -1;
END;
$$ LANGUAGE plpgsql;

-- 创建触发器以测试数据变更操作
CREATE TRIGGER trg_test_trigger 
BEFORE INSERT ON test_table 
FOR EACH ROW
EXECUTE FUNCTION trigger_function();

-- 插入更多复杂数据以增加覆盖率
INSERT INTO test_table (name, age, balance)
VALUES 
('Special Char', 42, 123.45),
('Test NULL', NULL, NULL);