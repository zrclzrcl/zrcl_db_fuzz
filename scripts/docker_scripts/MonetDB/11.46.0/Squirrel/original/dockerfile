#使用ubuntu 22.04版本作为基础镜像
from ubuntu:22.04

#使用的镜像维护者为Squirrel
LABEL maintainer="CCLLM"

#环境变量设置，使任何的安装都不需要进行交互，避免docker卡住
ENV DEBIAN_FRONTEND noninteractive

# common config

#更新apt-get包管理器 保证下载最新的
RUN apt-get update

#进行包安装 -y表示一切都是yes 无需询问，下面详细解释每个包的作用
#make cmake build-essential vim sudo git tcl8.6 tcl8.6-tdbc-sqlite3\
#    clang ninja-build pkg-config clang-format \
#    libpq-dev libyaml-cpp-dev lld llvm python3-fire
#make: 编译工具
#cmake: cmake工具
#build-essential: 包含了多个构建软件包的集合，主要包括编译器（如 gcc 和 g++），这些是编译 C/C++ 程序所需的基本工具。
#vim: vim编辑器
#sudo: 允许普通用户使用超级用户权限执行命令，通常用于提升权限
#git: git版本控制
#tcl8.6: 是 TCL（Tool Command Language）的版本 8.6。
#tcl8.6-tdbc-sqlite3: tcl语言解释器的sqlite3扩展
#clang: 一个 C/C++/Objective-C 编译器，属于 LLVM 项目
#ninja-build: 一个小型、快速的构建系统，通常与 CMake 配合使用来构建软件项目。
#pkg-config: 一个帮助管理编译和链接时使用的库路径和编译标志的工具
#clang-format: 一个用于格式化 C/C++/Objective-C 代码的工具，提供一致的代码样式。
#libpq-dev: ostgreSQL 数据库的开发库，用于与 PostgreSQL 数据库交互的客户端开发。
#libyaml-cpp-dev: YAML 文件解析和生成的 C++ 库的开发包。
#lld: LLVM 的链接器，通常与 Clang 一起使用
#llvm: 一个模块化的编译器框架，包括编译器和工具链组件。
#python3-fire: 一个 Python 库，用于根据 Python 代码自动生成命令行界面（CLI）。
RUN apt-get -y install make cmake build-essential vim sudo git tcl8.6 tcl8.6-tdbc-sqlite3\
    clang ninja-build pkg-config clang-format \
    libpq-dev libyaml-cpp-dev lld llvm python3-fire bison gcc

#构建文件夹 -p用于如果父目录不存在则一起创建 不会报错
#添加一个用户组，叫做dobigthing 
#添加一个用户，-l为创建系统用户无需建立用户目录 -k采用掩码方式最大化权限
#-d指定用户目录为/home -g指定用户组为dobigthing 用户名为dobigthing
#chown用于修改文件或目录的所有者 将/home目录的所有者改为dobigthing
RUN mkdir -p /home && \
    groupadd dobigthing && \
    useradd -l -K UMASK=0000 -d /home -g dobigthing dobigthing && \
    chown dobigthing:dobigthing /home

#echo用于输出字符，|为管道符号，将上一个指令的输出作为输入，给到下一个指令进行修改密码
#usermod用于修改账户属性 -a表明追加模式，即不取消现在的用户组，而是追加
#-G指定用户组为dobigthing，将dobigthing用户添加到sudo管理员用户组
RUN	echo "dobigthing:dobigthing" | chpasswd && usermod -a -G sudo dobigthing

#使管理员配置文件可编写，使dobigthing用户使用sudo时不需要输入密码
#之后取消它的写权限避免修改
RUN chmod +w /etc/sudoers && \
    echo "%dobigthing   ALL=(ALL:ALL)NOPASSWD:ALL" >> /etc/sudoers && \
    chmod -w /etc/sudoers

#切换用户为dobigthing
USER dobigthing
#切换工作目录为/home
WORKDIR /home

#在/home下克隆Squirrel项目
#切换到Squirrel项目目录
#更新引用的其他github项目
#-S .指定源目录为当前目录（Squirrel）
#-B build指定构建目录为build
#-DCMAKE_BUILD_TYPE=Release指定构建类型为Release
#-DSQLITE=ON指定编译sqlite
#命令用于构建 build 目录中的项目 -j表示并行构建
#切换到AFLplusplus目录
#使用make命令编译AFLplusplus项目
#设置环境变量 LLVM_CONFIG 为 llvm-config-14，用于指定 LLVM 的版本。
#make 工具编译项目，并行执行 20 个任务。
RUN git clone https://github.com/zrclzrcl/zrcl_db_fuzz.git && \
    cd zrcl_db_fuzz && git submodule update --init && \
    cd Squirrel && git submodule update --init && \
    cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DSQLITE=ON && \
    cmake --build build -j && \
    cd AFLplusplus/ && LLVM_CONFIG=llvm-config-14 make -j20


#克隆MonetDB 克隆的目录名为monetdb 进入到目录中，创建一个bld目录
RUN git clone https://github.com/MonetDB/MonetDB.git monetdb/ && cd monetdb && git checkout Sep2022_1 && mkdir bld
#切换到bld目录
WORKDIR /home/monetdb

#指定c语言编译器为afl-cc 用于在编译时插桩
ENV CC=/home/zrcl_db_fuzz/Squirrel/AFLplusplus/afl-cc
#指定c语言编译器为afl-c++ 用于在编译时插桩
ENV CXX=/home/zrcl_db_fuzz/Squirrel/AFLplusplus/afl-c++
#执行运行 configure 脚本。这个脚本用于检查构建环境，并生成一个适合当前环境的 Makefile
#进行并行编译 插装，插装后使用 make 工具生成 sqlite3.c 文件。sqlite3.c 是 SQLite 的一个单文件合并版本（amalgamation file），它包含了 SQLite 所有源代码的一个单一文件
RUN cmake -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_INSTALL_PREFIX=/home/monetdb/bld /home/monetdb
RUN cmake --build . && cmake --build . --target install

WORKDIR /home/monetdb/bld/bin
RUN AFL_DEBUG=1 __AFL_SHM_ID=1234  ./mserver5 2>&1 | grep "__afl_map_size" | tail -n 1 | cut -d"," -f8 | cut -d" " -f 3 > /tmp/mapsize

#切换工作目录
WORKDIR /home/Squirrel/scripts/utils
#进入点 命令 指定docker启动时的主命令 这里启动了run.py脚本并传递了两个参数
#第一个参数是数据库名 第二个参数为输入文件目录
ENTRYPOINT python3 run.py sqlite ../../data/fuzz_root/input