#使用ubuntu 22.04版本作为基础镜像
from ubuntu:22.04

#使用的镜像维护者为Squirrel
LABEL maintainer="Squirrel"

#环境变量设置，使任何的安装都不需要进行交互，避免docker卡住
ENV DEBIAN_FRONTEND noninteractive

# common config

#更新apt-get包管理器 保证下载最新的
RUN apt-get update

#进行包安装 -y表示一切都是yes 无需询问，下面详细解释每个包的作用
#make cmake build-essential vim sudo git tcl8.6 tcl8.6-tdbc-sqlite3\
#    clang ninja-build pkg-config clang-format \
#    libpq-dev libyaml-cpp-dev lld llvm python3-fire
#make: 编译工具
#cmake: cmake工具
#build-essential: 包含了多个构建软件包的集合，主要包括编译器（如 gcc 和 g++），这些是编译 C/C++ 程序所需的基本工具。
#vim: vim编辑器
#sudo: 允许普通用户使用超级用户权限执行命令，通常用于提升权限
#git: git版本控制
#tcl8.6: 是 TCL（Tool Command Language）的版本 8.6。
#tcl8.6-tdbc-sqlite3: tcl语言解释器的sqlite3扩展
#clang: 一个 C/C++/Objective-C 编译器，属于 LLVM 项目
#ninja-build: 一个小型、快速的构建系统，通常与 CMake 配合使用来构建软件项目。
#pkg-config: 一个帮助管理编译和链接时使用的库路径和编译标志的工具
#clang-format: 一个用于格式化 C/C++/Objective-C 代码的工具，提供一致的代码样式。
#libpq-dev: ostgreSQL 数据库的开发库，用于与 PostgreSQL 数据库交互的客户端开发。
#libyaml-cpp-dev: YAML 文件解析和生成的 C++ 库的开发包。
#lld: LLVM 的链接器，通常与 Clang 一起使用
#llvm: 一个模块化的编译器框架，包括编译器和工具链组件。
#python3-fire: 一个 Python 库，用于根据 Python 代码自动生成命令行界面（CLI）。
RUN apt-get -y install make cmake build-essential vim sudo git tcl8.6 tcl8.6-tdbc-sqlite3\
    clang ninja-build pkg-config clang-format \
    libpq-dev libyaml-cpp-dev lld llvm python3-fire

#构建文件夹 -p用于如果父目录不存在则一起创建 不会报错
#添加一个用户组，叫做dobigthing 
#添加一个用户，-l为创建系统用户无需建立用户目录 -k采用掩码方式最大化权限
#-d指定用户目录为/home -g指定用户组为dobigthing 用户名为dobigthing
#chown用于修改文件或目录的所有者 将/home目录的所有者改为dobigthing
RUN mkdir -p /home && \
    groupadd dobigthing && \
    useradd -l -K UMASK=0000 -d /home -g dobigthing dobigthing && \
    chown dobigthing:dobigthing /home

#echo用于输出字符，|为管道符号，将上一个指令的输出作为输入，给到下一个指令进行修改密码
#usermod用于修改账户属性 -a表明追加模式，即不取消现在的用户组，而是追加
#-G指定用户组为dobigthing，将dobigthing用户添加到sudo管理员用户组
RUN	echo "dobigthing:dobigthing" | chpasswd && usermod -a -G sudo dobigthing

#使管理员配置文件可编写，使dobigthing用户使用sudo时不需要输入密码
#之后取消它的写权限避免修改
RUN chmod +w /etc/sudoers && \
    echo "%dobigthing   ALL=(ALL:ALL)NOPASSWD:ALL" >> /etc/sudoers && \
    chmod -w /etc/sudoers

#切换用户为dobigthing
USER dobigthing
#切换工作目录为/home
WORKDIR /home


#clone zrcl_db_fuzz项目，里面已经包含了squirrel子项目
#全部下载后，进行编译Squirrel和AFL++
RUN git clone https://github.com/zrclzrcl/zrcl_db_fuzz.git && \
    cd zrcl_db_fuzz && git submodule update --init && \
    cd Squirrel && git submodule update --init && \
    cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DSQLITE=ON && \
    cmake --build build -j && \
    cd AFLplusplus/ && LLVM_CONFIG=llvm-config-14 make -j20

#指定c语言变异器为afl-cc 用于在编译时插桩
ENV CC=/home/zrcl_db_fuzz/Squirrel/AFLplusplus/afl-cc
#指定c语言变异器为afl-c++ 用于在编译时插桩
ENV CXX=/home/zrcl_db_fuzz/Squirrel/AFLplusplus/afl-c++

RUN cd zrcl_db_fuzz/scripts/zrcl_db_mutator/zrcl_db_mutator/ &&  \
    g++ -O3 -fPIC -shared -g -I ../../../Squirrel/AFLplusplus/include/ zrcl_db_mutator.cpp -o zrcl_db_mutator.so 

RUN cd zrcl_db_fuzz/scripts/LLM_Generate/LLM_Generate_testcase/after_split && \
    cp /home/zrcl_db_fuzz/scripts/LLM_Generate/LLM_Generate_testcase/after_split/*.txt /home/zrcl_db_fuzz/Squirrel/data/fuzz_root/input/  

#定义一个临时变量，只能在docker构建时使用
#CFLAGS是常用于编译 C/C++ 程序时传递给编译器的选项。在这种情况下，CFLAGS 被用来传递给编译 SQLite 的编译器选项。
#-DSQLITE_MAX_LENGTH=128000000: 设置 SQLite 文本字符串的最大长度为 128,000,000 字节。
#-DSQLITE_MAX_SQL_LENGTH=128000000: 设置 SQLite SQL 语句的最大长度为 128,000,000 字节。
#-DSQLITE_MAX_MEMORY=25000000: 设置 SQLite 使用的最大内存量为 25,000,000 字节。这是一个调优选项，用于限制 SQLite 进程的内存使用
#-DSQLITE_PRINTF_PRECISION_LIMIT=1048576: 设置 SQLite printf() 函数的最大精度限制为 1,048,576 字节。这是用于限制在 SQLite 中格式化字符串的精度。
#-DSQLITE_DEBUG=1: 启用 SQLite 的调试模式。这通常用于开发和调试目的，可以生成包含额外调试信息的二进制文件。
#-DSQLITE_DEBUG=1: 启用 SQLite 的调试模式。这通常用于开发和调试目的，可以生成包含额外调试信息的二进制文件。
ARG CFLAGS="-DSQLITE_MAX_LENGTH=128000000 -DSQLITE_MAX_SQL_LENGTH=128000000 -DSQLITE_MAX_MEMORY=25000000 -DSQLITE_PRINTF_PRECISION_LIMIT=1048576 -DSQLITE_DEBUG=1 -DSQLITE_MAX_PAGE_COUNT=16384"

#克隆sqlite 克隆的目录名为sqlite3 进入到目录中，创建一个bld目录
RUN git clone https://github.com/sqlite/sqlite sqlite3/ && cd sqlite3 && git checkout version-3.30.0 && mkdir bld
#切换到bld目录
WORKDIR /home/sqlite3/bld


#执行运行 configure 脚本。这个脚本用于检查构建环境，并生成一个适合当前环境的 Makefile
#进行并行编译 插装，插装后使用 make 工具生成 sqlite3.c 文件。sqlite3.c 是 SQLite 的一个单文件合并版本（amalgamation file），它包含了 SQLite 所有源代码的一个单一文件
RUN ../configure && make -j && make sqlite3.c

#插装编译ossfuzz.c
RUN $CC $CFLAGS -I. -c \
    /home/sqlite3/test/ossfuzz.c -o /home/sqlite3/test/ossfuzz.o
#插装编译ossshell.c
RUN $CC $CFLAGS -I. -c \
    /home/sqlite3/test/ossshell.c -o /home/sqlite3/test/ossshell.o
#将两个目标文件链接，生成可执行文件ossfuzz，动态链接（-ldl）sqlite3 并启用多线程（-pthread）
RUN $CXX $CXXFLAGS \
    /home/sqlite3/test/ossfuzz.o /home/sqlite3/test/ossshell.o -o /home/ossfuzz \
   ./sqlite3.o -ldl -pthread
#切换工作目录
WORKDIR /home/zrcl_db_fuzz/Squirrel/scripts/utils
#进入点 命令 指定docker启动时的主命令 这里启动了run.py脚本并传递了两个参数
#第一个参数是数据库名 第二个参数为输入文件目录
ENTRYPOINT python3 run_zrcl_mutator.py sqlite ../../data/fuzz_root/input