-- 创建一个包含多种数据类型的表
CREATE TABLE test_table (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER CHECK (age >= 0),
    score REAL DEFAULT 0.0,
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    data BLOB
);

-- 插入一些测试数据，包含NULL值和边界条件
INSERT INTO test_table(name, age, score, is_active, data)
VALUES 
    ('Alice', 25, 98.5, TRUE, X'0102'),
    ('Bob', NULL, NULL, FALSE, NULL),
    ('Charlie', 0, -1.23456789, TRUE, X'ABCDEF'),
    ('David', 100, 100.0, TRUE, X'FF');

-- 更新操作，测试边界条件和默认值
UPDATE test_table SET 
    age = (CASE WHEN name = 'Alice' THEN 25 ELSE age END),
    score = (CASE WHEN name = 'Bob' THEN -1.23456789 ELSE score END),
    is_active = NOT is_active,
    created_at = CURRENT_TIMESTAMP
WHERE id IN (SELECT id FROM test_table WHERE age > 0);

-- 测试删除操作，包含子查询和复杂条件
DELETE FROM test_table 
WHERE name LIKE 'A%' AND 
      (age < 18 OR score < 0) AND 
      is_active = FALSE;

-- 查询测试，包含聚合函数、排序、分组和窗口函数
SELECT 
    id,
    name,
    age,
    score,
    is_active,
    created_at,
    data,
    ROW_NUMBER() OVER (ORDER BY score DESC) AS row_num,
    RANK() OVER (ORDER BY age ASC) AS rank_val
FROM test_table
WHERE age > 0 OR score < 0
GROUP BY name, age
HAVING COUNT(*) > 1
ORDER BY score DESC NULLS LAST;

-- 测试事务和锁机制
BEGIN TRANSACTION;
    INSERT INTO test_table(name, age, score)
    VALUES ('TransactionTest', 30, 75.6);
    
    -- 故意制造一个可能的死锁或回滚情况
    UPDATE test_table SET score = score + 1 WHERE name LIKE 'T%';
COMMIT;

-- 创建索引以测试查询性能和优化器行为
CREATE INDEX idx_name_score ON test_table(name, score DESC);

-- 测试复杂的联合查询和子查询
SELECT t1.id, t1.name, t2.avg_score 
FROM (
    SELECT id, name FROM test_table WHERE age > 18
) AS t1
JOIN (
    SELECT id, AVG(score) AS avg_score FROM test_table GROUP BY id HAVING COUNT(*) > 1
) AS t2 ON t1.id = t2.id;

-- 测试边界条件和特殊值（如INT最小值）
INSERT INTO test_table(name, age, score)
VALUES 
    ('IntMinTest', -2147483648, NULL),
    ('IntMaxTest', 2147483647, NULL);

-- 清理测试数据
DELETE FROM test_table WHERE name LIKE 'Test%';