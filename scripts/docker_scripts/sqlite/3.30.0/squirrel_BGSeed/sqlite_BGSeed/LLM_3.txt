-- 创建一个包含各种数据类型的表，并插入一些测试数据
CREATE TABLE test_table (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    age INTEGER CHECK (age >= 0),
    balance REAL DEFAULT 0.0,
    is_active BOOLEAN DEFAULT TRUE,
    last_login DATE,
    description BLOB
);

-- 插入一些测试数据，包括边界值和特殊字符
INSERT INTO test_table VALUES 
(1, 'Alice', 30, 5000.5, TRUE, '2023-01-01', X'68656C6C6F'),
(2, 'Bob', -1, NULL, FALSE, '2023-01-02', X'74657374'),
(3, '', 255, 9999.99, TRUE, '2023-01-03', X''),
(4, 'Charlie', 127, -0.0001, FALSE, NULL, X'616263'),
(5, '测试用户', 0, 1000.1, TRUE, '2023-01-04', X'48656C6C6F20576F726C64');

-- 测试各种查询和操作
SELECT * FROM test_table WHERE age > 25 AND name LIKE 'A%';
SELECT COUNT(*) AS total_count, SUM(balance) AS total_balance 
FROM test_table 
WHERE is_active = TRUE;
SELECT DISTINCT last_login FROM test_table ORDER BY last_login DESC LIMIT 3;

-- 测试边界条件和特殊操作
UPDATE test_table SET balance = balance + 100 WHERE id = 1;
DELETE FROM test_table WHERE age < 0 OR name = '测试用户';
INSERT INTO test_table VALUES (6, 'Dave', NULL, NULL, NULL, NULL, NULL);

-- 测试事务和错误处理
BEGIN TRANSACTION;
    INSERT INTO test_table VALUES (7, 'Eve', 42, 100.0, TRUE, '2023-01-05', X'');
    ROLLBACK;

-- 确保表结构和数据一致性
PRAGMA integrity_check;