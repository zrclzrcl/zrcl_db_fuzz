CREATE TABLE IF NOT EXISTS test_table (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL DEFAULT 'unknown',
    age INTEGER CHECK (age >= 0),
    score REAL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    status BOOLEAN DEFAULT FALSE
);

INSERT INTO test_table (name, age, score) VALUES 
('Alice', 30, 95.5),
('Bob', 25, 87.6),
('Charlie', 40, 92.1),
('David', NULL, NULL),
('Eve', 35, 80.0);

SELECT * FROM test_table WHERE age > 25 ORDER BY score DESC LIMIT 2 OFFSET 1;

UPDATE test_table SET score = 96.0 WHERE name = 'Alice';

DELETE FROM test_table WHERE status = TRUE;

SELECT COUNT(*) AS total_count, SUM(age) AS total_age 
FROM test_table 
WHERE created_at >= date('now', '-1 month') 
GROUP BY status 
HAVING COUNT(*) > 2;

SELECT t1.name, t2.age 
FROM test_table AS t1 
LEFT JOIN (
    SELECT name, age FROM test_table WHERE score > 90
) AS t2 ON t1.name = t2.name;

SELECT DISTINCT name 
FROM test_table 
WHERE status = FALSE 
UNION 
SELECT name FROM test_table WHERE age < 30;

SELECT * FROM test_table 
WHERE id IN (
    SELECT id FROM test_table WHERE score > (SELECT AVG(score) FROM test_table)
);

CREATE TRIGGER IF NOT EXISTS update_trigger
AFTER UPDATE ON test_table
FOR EACH ROW
BEGIN
    INSERT INTO log_table VALUES (OLD.id, NEW.name, datetime('now'));
END;

BEGIN TRANSACTION;
INSERT INTO test_table (name, age, score) VALUES ('Frank', 28, 90.5);
SAVEPOINT my_savepoint;
UPDATE test_table SET score = 85.5 WHERE name = 'Frank';
ROLLBACK TO my_savepoint;
COMMIT;