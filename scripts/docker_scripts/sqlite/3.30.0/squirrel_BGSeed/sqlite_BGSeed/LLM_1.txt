-- 创建一张带有各种数据类型的表
CREATE TABLE test_table1 (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    age INTEGER CHECK (age >= 0),
    create_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN,
    score FLOAT
);

-- 插入测试数据，包含边界值和异常值
INSERT INTO test_table1 VALUES 
(1, 'Alice', 25, '2023-01-01 00:00:00', 1, 99.9),
(2, 'Bob', -1, '2024-12-31 23:59:59', 0, NULL),
(3, 'Charlie', 100, CURRENT_TIMESTAMP, 1, 100.0);

-- 创建另一张表用于测试JOIN操作
CREATE TABLE test_table2 (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    ref_id INTEGER,
    FOREIGN KEY(ref_id) REFERENCES test_table1(id)
);

-- 插入关联数据，包含外键约束
INSERT INTO test_table2 VALUES 
(1, 'GroupA', 1),
(2, 'GroupB', NULL),
(3, 'GroupC', 2);

-- 创建索引用于优化查询
CREATE INDEX idx_test_table1_name ON test_table1(name);
CREATE UNIQUE INDEX idx_test_table2_name ON test_table2(name);

-- 测试复杂的查询语句，包含子查询、JOIN和聚合函数
SELECT 
    t1.name AS name,
    t2.name AS group_name,
    COUNT(*) OVER() AS total_count,
    SUM(t1.score) AS total_score,
    (SELECT COUNT(*) FROM test_table2 WHERE ref_id = t1.id) AS ref_count
FROM 
    test_table1 t1
LEFT JOIN 
    test_table2 t2 ON t1.id = t2.ref_id
WHERE 
    t1.age > 0 AND 
    t2.name LIKE 'G%'
ORDER BY 
    t1.create_time DESC
LIMIT 5;

-- 测试事务控制
BEGIN TRANSACTION;
    UPDATE test_table1 SET is_active = 0 WHERE id = 3;
    DELETE FROM test_table2 WHERE ref_id = 3;
COMMIT;

-- 测试边界条件和异常处理
SELECT 
    CASE WHEN age < 0 THEN 'Negative' ELSE 'Positive' END AS age_type,
    strftime('%Y-%m-%d', create_time) AS formatted_date,
    lower(name) AS lowercase_name,
    COALESCE(score, 0) AS safe_score
FROM 
    test_table1
WHERE 
    id IN (SELECT ref_id FROM test_table2 WHERE name LIKE 'G%');