-- 创建包含多种数据类型的测试表
CREATE TABLE test_table (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    value REAL,
    is_active BOOLEAN DEFAULT 1,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- 插入各种边界条件的数据
INSERT INTO test_table (id, name, value, is_active)
VALUES 
(0, '', 0.0, 0),
(1, 'test', NULL, 1),
(-2147483648, 'negative', -999999999.999, 1);

-- 更新操作
UPDATE test_table SET name = 'updated' WHERE id > 0;
UPDATE test_table SET value = value * 2 WHERE is_active = 1;

-- 删除操作
DELETE FROM test_table WHERE name LIKE '%test%';

-- 复杂查询
SELECT 
    t.id, 
    t.name,
    COUNT(*) AS total_records,
    SUM(t.value) AS sum_value,
    MIN(t.value) AS min_value,
    MAX(t.value) AS max_value
FROM test_table t
JOIN (SELECT id FROM test_table WHERE is_active = 1) sub ON t.id = sub.id
GROUP BY t.name
HAVING COUNT(*) > 0
ORDER BY total_records DESC;

-- 事务处理
BEGIN TRANSACTION;
INSERT INTO test_table (id, name, value)
VALUES (4, 'transaction_test', 123.45);
COMMIT;

-- 显式锁定
SELECT * FROM test_table WHERE id = 1 FOR UPDATE;

-- 创建索引
CREATE INDEX idx_name ON test_table(name);
CREATE INDEX idx_is_active_value ON test_table(is_active, value);
CREATE UNIQUE INDEX idx_unique_id ON test_table(id);

-- 视图和触发器
CREATE VIEW test_view AS 
SELECT name, value, created_at FROM test_table WHERE is_active = 1;

CREATE TRIGGER after_update_trigger
AFTER UPDATE ON test_table
FOR EACH ROW
BEGIN
    INSERT INTO audit_log (action, timestamp)
    VALUES ('update', CURRENT_TIMESTAMP);
END;